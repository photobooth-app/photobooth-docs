{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Photobooth App","text":"<p>Github source - PyPI package - 3d printable case - Issues - Discussions</p> <p>The photobooth app is written in Python \ud83d\udc0d and coming along with a modern Vue frontend. This site contains the project documentation for the photobooth app project. The app is written in python. Setup your own photobooth for your wedding, birthday and other occations.</p> <p></p>"},{"location":"contribute/","title":"\ud83d\ude80 Contribute","text":""},{"location":"contribute/#post-issues","title":"Post Issues","text":"<p>If you find an issue, please post it in the photobooth app issue tracker.</p>"},{"location":"contribute/#improve-documentation","title":"Improve Documentation","text":"<p>If you find an issue in the documentation, modify the documentation or open a discussion.</p>"},{"location":"contribute/#send-patches-via-pull-request","title":"Send Patches via Pull Request","text":"<p>Feel free to fork the app, improve the software and send a pull request. For questions use the github discussions or issue tracker.</p>"},{"location":"contribute/#development","title":"Development","text":"<p>Develop on Windows or Linux using VScode. Dependency management is realized using poetry.</p> <p>Additional requirements for frontend development     - nodejs 16 (nodejs 18 fails proxying the devServer)     - yarn     - quasar cli https://quasar.dev/start/quasar-cli</p>"},{"location":"contribute/#automated-testing","title":"Automated Testing","text":"<p>Tests are run via Github Actions. The tests run in the Cloud on hosted Github runners as well as on a self-hosted runner for hardware testing. Coverage is reported to codecov.</p>"},{"location":"contribute/#selfhosted-github-runner","title":"Selfhosted Github Runner","text":"<p>Supports additional tests for hardware:</p> <ul> <li>Raspberry Pi Camera Module 3 connected to test picamera2 and autofocus algorithms</li> <li>WLED module is connected to test LED effects on thrill and shoot</li> <li>gphoto2 is installed with virtual ptp device<ul> <li>install latest dev with gphoto2 updater,  modify configure command as described here https://github.com/gphoto/libgphoto2/issues/408)</li> <li>add photos libgphoto provides when capture is requested to /usr/share/local/libgphoto2_port/xxxversion/vcamera/</li> </ul> </li> <li>webcamera is connected to test cv2 and v4l backends</li> </ul>"},{"location":"installation/","title":"Installation \ud83d\udd27","text":""},{"location":"installation/#supported-platforms-and-cameras","title":"Supported Platforms and Cameras","text":"Hardware-Platform Software-Platform Supported Cameras Raspberry Pi 3 / 4 Raspberry Pi OS 64bit Bullseye Camera Modules, gphoto2 DSLR and webcams via opencv or v4l2 Generic PC Debian/Ubuntu gphoto2 DSLR and webcams via opencv or v4l2 Generic PC Windows webcams via opencv"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or later</li> <li>Camera, can be one or two (first camera for stills, second camera for live view)<ul> <li>DSLR: gphoto2 on Linux</li> <li>Picamera2: installed and working (test with <code>libcamera-hello</code>)</li> <li>Webcamera: no additional prerequisites, ensure camera is working using native system apps</li> </ul> </li> <li>Raspberry Pi Bullseye for Picamera2 or any other linux/windows system</li> <li>Turbojpeg (via apt on linux, manually install on windows)</li> <li>works probably best with 3d printed photobooth and parts listed in the BOM</li> </ul> <p>The photobooth app can be used standalone but is not feature complete yet. Anyway, it integrates well with the fully blown photobooth project, see description below how to achieve integration.</p>"},{"location":"installation/#install-on-linux-debianubunturaspberrypi-os","title":"Install on Linux (Debian/Ubuntu/RaspberryPi OS)","text":"<p>The app is available as PyPI package. On a fresh Raspberry Pi OS 64bit, run following commands:</p>"},{"location":"installation/#update-system","title":"Update System","text":"<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre>"},{"location":"installation/#install-system-dependencies","title":"Install system dependencies","text":"<p>Following dependencies to be installed for Raspberry Pi OS 64bit Bullseye. Adjust for debian/ubuntu. Picamera2 is only available on Raspberry Pi.</p> <pre><code>sudo apt-get -y install libturbojpeg0 python3-pip libgl1 libgphoto2-dev\nsudo apt-get -y install python3-picamera2\n</code></pre>"},{"location":"installation/#tweak-system-settings","title":"Tweak system settings","text":"<p>To use hardware input from keyboard or presenter, the current user needs to be added to tty and input group. Replace {USERNAME} by actual username, for example pi.</p> <pre><code>usermod --append --groups tty,input {USERNAME}\n</code></pre>"},{"location":"installation/#install-photobooth-app-from-pypi","title":"Install photobooth app from PyPi","text":"<pre><code>pip install photobooth-app\n</code></pre>"},{"location":"installation/#create-data-folder","title":"Create data folder","text":"<p>The photobooth-app automatically uses the current folder as data folder. All images, logs and config files will be stored in this folder.</p> <pre><code>mkdir ~/photobooth-data\ncd ~/photobooth-data\n</code></pre>"},{"location":"installation/#start-the-app","title":"Start the app","text":"<pre><code>photobooth\n</code></pre> <p>Browse to http://localhost:8000 and see if the app is working properly. Per default the app uses a generated image and displays a timer only. No camera is started at this point. You need to continue setting up the cameras.</p> <p>Info</p> <p>Have issues accessing the website or see error messages during installation and app startup? Check the troubleshooting guide.</p>"},{"location":"installation/#install-on-windows","title":"Install on Windows","text":"<p>While using the app on windows works, there is no documentation yet. Also use is limited by now, because the digicamcontrol software is not yet implemented. Only webcams can be used on windows right now.</p>"},{"location":"installation/#install-development-version","title":"Install development version","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version install directly from git:</p> <pre><code>pip install git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"screenshots/","title":"Screenshots","text":"Frontpage List images in the gallery View image in the gallery Choose camera backend in admin panel Personalize the user interface in admin panel View latest logs and status information in the admin panel"},{"location":"setup/","title":"Setup Cameras","text":"<p>The photobooth app supports cameras utilizing multiple backends:</p> <ul> <li>picamera2 backend supports Raspberry Pi Camera Modules</li> <li>gphoto2 backend supports DSLR cameras on Linux platforms</li> <li>digicamcontrol backend supports DSLR cameras on Windows platforms (not yet implemented!)</li> <li>opencv2 backend supports USB webcameras on Linux and Windows platforms</li> <li>v4l2 backend supports USB webcameras on Linux</li> </ul> <p>Two backends can be used simultaneously in hybrid mode. The first backend is used as main backend to capture high quality still images. The second backend is used as live backend to stream video preview only.</p> <p>Note</p> <p>After changing config, the app needs to be restarted manually.</p> <p>If you need help setup a specific camera, start a new discussion on github.</p>"},{"location":"setup/#raspberry-csi-camera-modules","title":"Raspberry CSI Camera Modules","text":"<p>Camera modules are supported using picamera2 based on the new libcamera stack. Autofocus camera modules are supported.</p> <p>The app is tested with following devices:</p>"},{"location":"setup/#camera-module-3","title":"Camera Module 3","text":"<p>The latest Camera Module 3 is probably the best camera module to use in the photobooth. It supports fast autofocus and comes with native driver in the Raspberry Pi OS.</p> <p>Ensure the camera is working properly using the libcamera stack:</p> <pre><code>libcamera-hello\n</code></pre> <p>If it does properly open the camera, the photobooth app can use it also. If some errors come up, try to fix the camera setup before start using it actually. Find installation instructions directly at the raspberry pi foundation.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Picamera2</li> <li>Choose Picamera2 focuser module, set Continuous for camera module 3</li> <li>Enable livepreview if desired</li> <li>Change the resolution requested from the camera on common tab to width=4608, height=2592</li> <li>Restart the app</li> </ul>"},{"location":"setup/#camera-modules-12hq","title":"Camera Modules 1/2/HQ","text":"<p>All other camera modules from the Raspberry Pi ecosystem work the same way as the latest camera module 3. They usually come with lower image quality and do not have autofocus. Due to this other camera modules are not recommended for use as main camera. You might consider to use them only for livestream preview.</p> <p>Setup is the same as for camera module 3 but with different resolution and no focuser module enabled.</p>"},{"location":"setup/#arducam-imx519","title":"Arducam imx519","text":"<p>Sony's imx519 sensor used in Arducam's imx519 camera module is supported by the Raspberry Pi OS natively since about March 2023.</p> <p>This means the module can be used with or without installing Arducams custom driver packages:</p> <ul> <li>without Arducams driver:<ul> <li>\u2796No PDAF support</li> <li>\u2796Only interval based autofocus e.g. every 10 seconds</li> <li>\u2795More stable upgrades because no customized libcamera needs to be installed.</li> <li>install as described in discussions</li> </ul> </li> <li>with Arducams driver:<ul> <li>\u2795PDAF support</li> <li>\u2795Continuous autofocus like camera module 3</li> <li>\u2796apt upgrade may break driver/libcamera from time to time</li> <li>install as described by Arducam</li> </ul> </li> </ul> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Picamera2</li> <li>Choose Picamera2 focuser module, set Continuous if Arducams driver installed, otherwise choose Interval.</li> <li>Enable livepreview if desired</li> <li>Change the resolution requested from the camera on common tab to width=4656, height=3496</li> <li>Restart the app</li> </ul>"},{"location":"setup/#other-third-party-camera-modules","title":"Other third party camera modules","text":"<p>In principle every camera supported by libcamera / picamera2 would work. Since the cameras do not come with native support of the Raspberry Pi OS using them could be troublesome and it's untested. Start a discussion if there is a camera not working properly.</p>"},{"location":"setup/#dslr-via-gphoto2-linux","title":"DSLR via gphoto2 (Linux)","text":"<p>The app is tested with a Canon 1100D. In general all gphoto2 supported cameras can be used. If the camera supports liveview a stream is created and being used as preview in the app. If the camera does not support liveview, you might want to consider setup the app in hybrid mode. Main camera would be the DSLR to take high quality images, the livestream is captured from a secondary backend. As secondary backend most suitable is a webcamera or raspberry pi camera module.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Gphoto2</li> </ul> <p>DSLR cameras of different manufacturer may behave differently. There are some settings that might need to be adjusted if autofocus is slow or preview cannot be generated. Tinker with available settings until it works properly. If you run into trouble, create a new issue in the tracker.</p>"},{"location":"setup/#dslr-via-digicamcontrol-windows","title":"DSLR via digicamcontrol (Windows)","text":"<p>Implementation not yet finished, feel free to contribute \ud83d\ude0a</p>"},{"location":"setup/#webcam","title":"Webcam","text":"<p>USB-webcams are integrated via two backends:</p> <ul> <li>Opencv2 (Linux/Windows) and</li> <li>v4l2 (Linux only).</li> </ul> <p>On Linux prefer v4l2 backend because it is more efficient in directly streaming MJPG data instead image frames like the opencv2 implementation.</p> <p>To use the webcam choose opencv2 or v4l2 as backend.</p> <p>Both backends use a camera device index to open the camera. To find which indexes are available on your system issue the following commands.</p> check v4l2 indexes:<pre><code>python -c \"from photobooth.services.backends.webcamv4l import *; print(available_camera_indexes())\"\n</code></pre> check opencv2 indexes:<pre><code>python -c \"from photobooth.services.backends.webcamcv2 import *; print(available_camera_indexes())\"\n</code></pre> <p>The command returns an array of indexes for which a webcam was detected.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the backend (cv2 or v4l) as main backend</li> <li>Consider changing the resolution requested from the camera on common tab.</li> </ul>"},{"location":"setup/#hybrid-dslr-and-second-backend-to-stream","title":"Hybrid: DSLR and second backend to stream","text":"<p>The app supports simultaneous use of two backends at the same time. This is useful to grab high quality pictures from a DSLR camera via gphoto2 and livestream from a webcamera or picamera module. Hybrid mode allows for live preview even if the DSLR camera is not capable to stream preview video.</p> <p>In hybrid mode, the main backend is used for still images, the live backend for video streaming. To enable hybrid mode:     - configure main backend as normal     - also configure live backend.</p> <p>If a live backend is set, it is requested for video preview instead of the main backend.</p>"},{"location":"extras/","title":"Extras","text":"<p>This sections describes additional hardware and operating system customization to enhance the photobooth.</p>"},{"location":"extras/sync/","title":"Sync Online","text":"<p>(for file downloads via QR Code)</p> <pre><code>sudo apt-get install rclone inotify-tools\n</code></pre> <pre><code>rclone config\n</code></pre> <p>Setup the remote named \"boothupload\"!</p> <pre><code>chmod u+x ~/photobooth-app/boothupload.sh\ncp ~/photobooth-app/boothupload.service ~/.config/systemd/user/\nsystemctl --user enable boothupload.service\nsystemctl --user start boothupload\nsystemctl --user status boothupload\n</code></pre>"},{"location":"extras/wifi/","title":"Wifi and Hotspot","text":"<p>At home prefer local wifi with endless data. If this is not available connect to a mobile hotspot for online sync.</p> <p>In file /etc/wpa_supplicant/wpa_supplicant.conf set a priority for local and hotspot wifi:</p> <pre><code>network={\n    ssid=\"homewifi\"\n    psk=\"passwordOfhomewifi\"\n    priority=10\n}\nnetwork={\n   ssid=\"mobileexpensivewifi\"\n   psk=\"passwordOfmobileexpensivewifi\"\n   priority=5\n}\n</code></pre>"},{"location":"extras/wled/","title":"WLED integration","text":"<p>for LED signaling</p> <p>Add animated lights to your photobooth powered by WLED. WLED is a fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs.</p> <p>Head over to https://kno.wled.ge/basics/getting-started/ for installation instructions and hardware setup. Connect the ESP board via USB to the photobooth computer.</p> <p>In the WLED webfrontend define three presets:</p> <ul> <li>ID 1: standby (usually LEDs off)</li> <li>ID 2: countdown (animates countdown)</li> <li>ID 3: shoot (imitate a flash)</li> </ul> <p>Please define presets on your own in WLED webfrontend. Once added, in the photobooth enable the WLED integration and provide the serial port. Check logs on startup whether the module is detected correctly.</p>"},{"location":"help/","title":"Help","text":"<p>See help on sub chapters.</p>"},{"location":"help/faq/","title":"FAQ","text":"<p>TODO! No FAQ yet.</p> <p>Check discussions for further help!</p>"},{"location":"help/troubleshooting/","title":"Troubleshooting","text":""},{"location":"help/troubleshooting/#photobooth-app-website-not-available","title":"Photobooth app website not available","text":"<p>In default configuration the app listens to 0.0.0.0:8000, so it can be reached from every computer in the same network on port 8000.</p> <p>If the website is not available, the reason could be</p> <ul> <li>network issues or</li> <li>bad configuration</li> </ul> <p>Check that the website is available on the device itself via http://localhost:8000. If that works, the issue is about the network.</p> <p>If not, the app might have crashed.</p> <p>The following commands help tracking down issues and gather information:</p> <pre><code># logfiles from service (last 200 lines)\njournalctl --user --unit=photobooth-app -n 200 --no-pager\n# logfiles created by photobooth\ncat ~/photobooth-data/log/qbooth.log\n# check CmaFree especially for Arducams if low:\ncat /proc/meminfo\n</code></pre> <p>If service crashed \ud83d\udc80, kill the python process:</p> <pre><code># check whether there is a process still running but not responsive:\nps ax | grep python3\n# kill it\nsudo pkill -9 python3\n</code></pre> <p>Manually start the photobooth-app and watch the terminal</p> <pre><code>photobooth #or\npython -m photobooth\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<p>See references on sub chapters.</p>"},{"location":"reference/api/","title":"HTTP API","text":"<p>Following HTTP api is provided by the photobooth app.</p> <p></p>"},{"location":"reference/photoboothprojectintegration/","title":"Integrate Photobooth-Project and this Photobooth-App","text":"<p>Info</p> <p>This photobooth app is not yet feature complete. If you miss a feature consider to pair it with the photobooth project.</p> <p>Once this app and photobooth project is installed, integrate them using the settings below in photobooth project.</p> <p>Following commands have to be set in photobooth project to use this app as streamingserver. Works best if photobooth-app and photobooth-project installed on same device. If installed on different device, replace http://localhost by the actual hostname.</p> <pre><code>take_picture_cmd: curl -o \"%s\" http://localhost:8000/aquisition/still | echo Done\ntake_picture_msg: Done\npre_photo_cmd: curl http://localhost:8000/aquisition/mode/capture\npost_photo_cmd: curl http://localhost:8000/aquisition/mode/preview\npreview_url: url(\"http://localhost:8000/aquisition/stream.mjpg\")\nbackground_defaults: url(\"http://localhost:8000/aquisition/stream.mjpg\")\n</code></pre>"}]}