{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Written in Python \ud83d\udc0d, coming along with a modern Vue frontend.</p> <p> </p> <p>Github source - PyPI package - 3d printable case - Issues - Discussions</p> <p>This site contains the project documentation for the photobooth app project. Setup your own photobooth for your wedding, birthday and other occations.</p>"},{"location":"contribute/","title":"\ud83d\ude80 Contribute","text":""},{"location":"contribute/#help-improve","title":"Help Improve","text":""},{"location":"contribute/#post-issues","title":"Post Issues","text":"<p>If you find an issue, please post it in the photobooth app issue tracker.</p>"},{"location":"contribute/#improve-documentation","title":"Improve Documentation","text":"<p>If you find an issue in the documentation, modify the documentation or open a discussion.</p>"},{"location":"contribute/#send-patches-via-pull-request","title":"Send Patches via Pull Request","text":"<p>Feel free to fork the app, improve the software and send a pull request. For questions use the github discussions or issue tracker.</p>"},{"location":"contribute/#help-develop","title":"Help Develop","text":""},{"location":"contribute/#install-development-version","title":"Install development version","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version install directly from git:</p> <pre><code>pip install git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"contribute/#development","title":"Development","text":"<p>Develop on Windows or Linux using VScode. Dependency management is realized using poetry.</p> <p>Additional requirements for frontend development     - nodejs 16 (nodejs 18 fails proxying the devServer)     - yarn     - quasar cli https://quasar.dev/start/quasar-cli</p>"},{"location":"contribute/#automated-testing","title":"Automated Testing","text":"<p>Tests are run via Github Actions. The tests run in the Cloud on hosted Github runners as well as on a self-hosted runner for hardware testing. Coverage is reported to codecov.</p>"},{"location":"contribute/#selfhosted-github-runner","title":"Selfhosted Github Runner","text":"<p>Supports additional tests for hardware:</p> <ul> <li>Raspberry Pi Camera Module 3 connected to test picamera2 and autofocus algorithms</li> <li>WLED module is connected to test LED effects on thrill and shoot</li> <li>gphoto2 is installed with virtual ptp device<ul> <li>install latest dev with gphoto2 updater,  modify configure command as described here https://github.com/gphoto/libgphoto2/issues/408)</li> <li>add photos libgphoto provides when capture is requested to /usr/share/local/libgphoto2_port/xxxversion/vcamera/</li> </ul> </li> <li>webcamera is connected to test cv2 and v4l backends</li> </ul>"},{"location":"download/","title":"Download","text":"<p>This app comes as a PyPi package. To download and run this app you need two items:</p> <ul> <li>python &gt;=3.9 including package installer pip</li> <li>photobooth-app latest PyPi package</li> </ul> <p>On Linux python is usually already available. On windows download python from the website above or from the Microsoft Store.</p> <p>The installation process is described here in detail.</p>"},{"location":"features/","title":"Features","text":"<p>This table is comparing the photobooth-app with other open source photobooth software. Commercial software like DSLRbooth is not taken into account.</p> Feature photobooth-app PhotoboothProject PiBooth first version release 2023 2016 2017 Stars Community \u2795\u2795 \u2795\u2795\u2795 \u2795 Reference system incl Box design \u2705 \u274c \u274c Supported Cameras and Image Features Raspberry Pi Cameras: Picamera2 \u2705 \u23fa\ufe0f<sup>2</sup> \u23fa\ufe0f<sup>1</sup> DSLR: Gphoto2 \u2705 \u2705<sup>2</sup> \u2705 DSLR: Digicamcontrol \u2705 \u2705<sup>2</sup> \u274c Webcameras: opencv2 \u2705 \u2705<sup>2</sup> \u2705 Webcameras: v4l2py<sup>3</sup> \u2705 \u274c \u274c Camera live preview streaming \u2705 \u23fa\ufe0f<sup>5</sup> \u274c Image Features and Postprocessing Capture single picture \u2705 \u2705 \u2705 Capture collages \u2705 \u2705 \u2705 Capture video/GIF \u274c \u274c \u274c Instagram-Like Image Filter \u2705 \u274c \u274c Background removal: Chromakeying \u2705 \u2705 \u274c Add predefined background \u2705 \u2705 \u274c Add frame with transparency to pictures \u2705 \u2705 \u274c Gallery Gallery local display \u2705 \u2705 \u274c Gallery external access via IP \u2705 \u2705 \u274c Sync images to USB drive \u274c \u2705 \u274c Share images online via QR code \u2705 \u23fa\ufe0f<sup>4</sup> \u2705 Printing \u2705 \u2705 \u2705 Personalization Customizable Theme \u274c \u2705 \u274c Translateable \u274c \u2705 \u2705 Peripheral Integration Configurable GPIO trigger (RPI) \u2705 \u2705 \u2705 Configurable keyboard trigger \u2705 \u2705 \u274c ws281x to signal capture \u2705 \u274c \u274c REST-API \u2705 \u274c \u274c Admin Admin Backend \u2705 \u2705 \u274c Admin Configuration Panel \u2705 \u2705 \u274c Admin Backend Protected \u274c \u2705 \u274c Plugin Architecture \u274c \u274c \u2705 Dev Installable package \u2705 \u23fa\ufe0f install script \u2705 Automated testing including hardware \u274c Supported OS Raspberry Pi Bookworm \u2705 \u2705 \u274c Raspberry Pi Bullseye \u2705 \u2705 \u274c Debian/Ubuntu \u2705 \u2705 \u2705 Windows \u2705 \u2705 \u274c <ol> <li> <p>Picamera1 only, modules &lt;= v2.1 only, no camera module 3 supported\u00a0\u21a9</p> </li> <li> <p>Integrated via command line interface and external programs\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>Less CPU utilization than opencv2\u00a0\u21a9</p> </li> <li> <p>Manual custom sync to implement or client need to access wifi accesspoint\u00a0\u21a9</p> </li> <li> <p>local preview only\u00a0\u21a9</p> </li> </ol>"},{"location":"photobox3dprint/","title":"3D Printed Photobooth","text":"<p>In general the photobox can be custom made out of materials you prefer. To develop and as starting point a reference design to 3d print is provided.</p> <p>If you want to add your box to this page, send a message in the discussions, category show and tell \ud83d\udce3.</p>"},{"location":"photobox3dprint/#3d-printed-reference","title":"3D printed reference","text":"<p>The photobooth is made out of a 3d printed case. Find the CAD files in the github repo: https://github.com/mgrl/photobooth-3d</p>"},{"location":"photobox3dprint/#features","title":"Features","text":"<ul> <li>solidworks files available</li> <li>compact design</li> <li>camera module integrated</li> <li>led ring signaling photo countdown and when the photo is actually taken</li> <li>7\" touchscreen</li> <li>remote buzzer</li> </ul>"},{"location":"photobox3dprint/#renderings-and-photos","title":"Renderings and Photos","text":"Total including stand tripod Total view including stand tripod Parts named Rear view Rear view 2 Rear view 3 Rear photo"},{"location":"projects/","title":"Projects and Examples","text":"<p>This is a collection of user made photobooth projects. Inspire and start making yours! \ud83d\udeeb</p> <p>If you want to add your booth to this page, send a message in the discussions, category show and tell \ud83d\udce3.</p>"},{"location":"projects/#example-projects","title":"Example projects","text":""},{"location":"projects/#3d-printed-photobooth-reference","title":"3D Printed Photobooth Reference","text":"<p>Compact 3d printed photobooth. Raspberry Pi 4B and Picamera2 system. Camera is the camera module 3. Lighting with permanent light sources.</p> <p>Additional information: 3d printed box, buzzer, image share one via QR code</p> <p> </p>"},{"location":"projects/#yours-here-that-would-be-awesome","title":"Yours here? That would be awesome! \ud83d\udd76\ufe0f","text":"<p>If you want to add your booth to this page, send a message in the discussions, category show and tell \ud83d\udce3.</p>"},{"location":"screenshots/","title":"Screenshots","text":"Frontpage List images in the gallery View image in the gallery Users can change the filter Easy to configure your photobooth in config dashboard View latest logs and status information in the admin panel"},{"location":"extras/","title":"Extras","text":"<p>This sections describes additional hardware and operating system customization to enhance the photobooth.</p>"},{"location":"extras/buzzer/","title":"Buzzer","text":"<p>Use a buzzer to trigger photos in the photobooth</p>"},{"location":"extras/buzzer/#big-red-hot-button","title":"Big Red Hot Button","text":"<p>This button is based on ESP powered by battery. It emulates a keyboard and thus can be used with the photobooth-app or other photobooth projects that use keyboard input to trigger captures.</p> <p>The power consumption measured is about 60mA - the battery has 1100mAh capacity. This gives a runtime if fully charged of 18h. Loading works only if battery is connected, means the button must be switched on to load.</p>"},{"location":"extras/buzzer/#hardware-and-assembly","title":"Hardware and Assembly","text":"<p>see separate git repository https://github.com/mgrl/photobooth-buzzer</p>"},{"location":"extras/buzzer/#esp-microcontroller-software","title":"ESP Microcontroller Software","text":"<p>see separate git repository https://github.com/mgrl/photobooth-buzzer</p>"},{"location":"extras/buzzer/#setup-in-photobooth-app","title":"Setup in photobooth app","text":"<p>Go to admin dashboard -&gt; configure -&gt; tab: hardwareinputoutput.</p> <ul> <li>Enable keyboard input</li> <li>choose the character (default = c) to take a picture.</li> </ul>"},{"location":"extras/display/","title":"Display","text":""},{"location":"extras/display/#disable-display-standby","title":"Disable display standby","text":"<p>If the display turns off after some time, disable the power save mode. Run <code>sudo raspi-config</code> and disable \"Screen Blanking\".</p>"},{"location":"extras/display/#hide-mouse-curser","title":"Hide mouse curser","text":"<p>For touchscreen displays you might consider to remove the mouse cursor. Install unclutter for this. After reboot it is enabled automatically.</p> <pre><code>sudo apt install unclutter\n</code></pre>"},{"location":"extras/onscreenkeyboard/","title":"Onscreen Display for Raspberry Pi","text":"<p>Sometimes you need to enter a E-Mail address, a password or configure the app in the admin center. There are several ways to do this, but sometimes it is more convenient to have a onscreen keyboard.</p> <p>There are several virtual keyboards available:</p> <ul> <li>onboard (preferred)</li> <li>florence or</li> <li>matchbox-keyboard</li> </ul> <p>Install one of them:</p> <pre><code># preferred:\nsudo apt-get install onboard\n\n# alternatives:\nsudo apt-get install florence\nsudo apt-get install matchbox-keyboard\n</code></pre> <p>Find some screenshots at industrialshields blog.</p> <p>See this youtube video, how to configure onboard virtual keyboard.</p>"},{"location":"extras/shareservice-landing/","title":"Want to download images?","text":"<p>Probably you wanted to download an image from photobooth via QR code? It seems this is not correctly configured \ud83d\ude12</p> <p>\u27a1\ufe0f \u27a1\ufe0f \u27a1\ufe0f Setup the shareservice as described!</p>"},{"location":"extras/sync/","title":"Sync Online","text":"<p>(for file downloads via QR Code)</p> <pre><code>sudo apt-get install rclone inotify-tools\n</code></pre> <pre><code>rclone config\n</code></pre> <p>Setup the remote named \"boothupload\"!</p> <pre><code>chmod u+x ~/photobooth-app/boothupload.sh\ncp ~/photobooth-app/boothupload.service ~/.config/systemd/user/\nsystemctl --user enable boothupload.service\nsystemctl --user start boothupload\nsystemctl --user status boothupload\n</code></pre>"},{"location":"extras/wifi/","title":"Wifi and Hotspot","text":"<p>At home prefer local wifi with endless data. If this is not available connect to a mobile hotspot for online sync.</p> <p>In file /etc/wpa_supplicant/wpa_supplicant.conf set a priority for local and hotspot wifi:</p> <pre><code>network={\n    ssid=\"homewifi\"\n    psk=\"passwordOfhomewifi\"\n    priority=10\n}\nnetwork={\n   ssid=\"mobileexpensivewifi\"\n   psk=\"passwordOfmobileexpensivewifi\"\n   priority=5\n}\n</code></pre>"},{"location":"extras/wled/","title":"LED signaling using WS281x","text":"<p>Add animated lights to your photobooth powered by WLED. WLED is a fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs.</p> <p>WLED integration for LED signaling, see yourself:</p>"},{"location":"extras/wled/#hardware","title":"Hardware","text":""},{"location":"extras/wled/#bom","title":"BOM","text":"<ul> <li>ESP board, for example Wemos D1 mini.</li> <li>3d printed mount for wemos d1 mini</li> <li>ring light for 3d printed photobooth or whatever led stripe you want</li> <li>some cables</li> </ul>"},{"location":"extras/wled/#wiring","title":"Wiring","text":""},{"location":"extras/wled/#setup-wled","title":"Setup WLED","text":"<ul> <li>Connect the ESP board via USB to the computer running the photobooth-app.</li> <li>Install WLED using the webinstaller</li> <li>Connect the WLED device to your WiFi. The webinstaller asks for the credentials and configures the ESP accordingly.</li> <li>Visit the WLED website on the ESP and configure.</li> <li>If you use exact the same items listed in the BOM, you can start using following<ul> <li>config</li> <li>presets</li> </ul> </li> <li>In the photobooth-app enable the WLED integration and add the serial port to the ESP device in the admin config.</li> </ul> <p>For more detailed instructions on the WLED device itself see the WLED website see</p>"},{"location":"extras/wled/#links-to-wled-project","title":"Links to WLED project","text":"<p>Head over to https://kno.wled.ge/basics/getting-started/ for more detailed installation instructions and hardware setup.</p>"},{"location":"extras/wled/#required-presets-for-photobooth-to-work","title":"Required presets for photobooth to work","text":"<p>In the WLED webfrontend define three presets:</p> <ul> <li>ID 1: standby (usually LEDs off)</li> <li>ID 2: countdown (animates countdown)</li> <li>ID 3: shoot (imitate a flash)</li> </ul> <p>Please define presets on your own in WLED webfrontend. Once added, in the photobooth enable the WLED integration and provide the serial port to WLED esp device. Check logs on startup whether the module is detected correctly.</p>"},{"location":"reference/","title":"Reference","text":"<p>See references on sub chapters.</p>"},{"location":"reference/api/","title":"REST API","text":"<p>Following REST-API is provided by the photobooth app. Use it to integrate with your own clients or smart devices like buzzer.</p> <p></p>"},{"location":"reference/directories/","title":"Directories","text":"<p>Info</p> <p>Photobooth uses the current working directory to store all data.</p> <p>All subfolders are below the current working directory.</p> Data Subfolder Web access media (images, videos, ...) /media <code>http://IP:PORT/media</code> logfiles /log via REST-API user data (images, frames, fonts, ...) /userdata via adminpanel file explorer config /config via REST-API"},{"location":"reference/directories/#mediaitems","title":"Mediaitems","text":"<p>The captured media (images, ...) are stored as well as cached versions of the postprocessed media to ensure short response times of the app.</p> <p>The original is directly from image source and no processing was applied. The unprocessed version (sizes small, medium large) represend the original without any filter or pipeline stages from postprocessing applied. The processed version (sizes small, medium large) have all configured filters applied.</p> Item Subfolder Web access original from camera /media/original <code>/media/original</code> unprocessed L version (full) /media/unprocessed/full <code>/media/unprocessed/full</code> unprocessed M version (preview) /media/unprocessed/preview <code>/media/unprocessed/preview</code> unprocessed S version (small) /media/unprocessed/small <code>/media/unprocessed/small</code> processed L version (full) /media/processed/full <code>/media/processed/full</code> processed M version (preview) /media/processed/preview <code>/media/processed/preview</code> processed S version (small) /media/processed/small <code>/media/processed/small</code>"},{"location":"reference/photoboothprojectintegration/","title":"Integrate with Photobooth-Project","text":"<p>Info</p> <p>This photobooth-app nowadays has many features that you would need for a fully functional booth.</p> <p>Compare the feature list and open an issue if you miss a feature.</p> <p>If you miss a feature consider to pair it with the photobooth project.</p> <p>Following commands have to be set in photobooth project to use this app as streamingserver. Works best if photobooth-app and photobooth-project installed on same device. If installed on different device, replace http://localhost by the actual hostname.</p> <pre><code>take_picture_cmd: curl -o \"%s\" http://localhost:8000/aquisition/still | echo Done\ntake_picture_msg: Done\npre_photo_cmd: curl http://localhost:8000/aquisition/mode/capture\npost_photo_cmd: curl http://localhost:8000/aquisition/mode/preview\npreview_url: url(\"http://localhost:8000/aquisition/stream.mjpg\")\nbackground_defaults: url(\"http://localhost:8000/aquisition/stream.mjpg\")\n</code></pre>"},{"location":"setup/","title":"Setup the photobooth","text":"<p>This chapter describes the setup of the python photobooth app on linux or windows platform. Start by</p> <ul> <li>installing the app and</li> <li>setup one or two cameras.</li> <li>Later you might want to add GPIO support, printing or other extras.</li> <li>Updating the app gives you latest features. See the changelog for what's new.</li> <li>You have issues? Want to discuss? Come over to github discussions.</li> </ul>"},{"location":"setup/admincenter/","title":"Admin Center","text":"<p>The admin center is the central place to configure the photobooth software. You can also use it to upload and download files to the device.</p> <p>On the photobooth device browse to the admin center to configure your photobooth app: http://localhost:8000/#/admin</p> <p>Info</p> <p>From other devices you might need to replace <code>localhost</code> by the hostname of the booth. Port <code>8000</code> is default if you did not change it.</p>"},{"location":"setup/admincenter/#overview","title":"Overview","text":"Enter the admin pages, dashboard is the start"},{"location":"setup/admincenter/#server-control","title":"Server Control","text":"<ul> <li>Shutdown or rebooth the host computer.</li> <li>Restart the service: On linux if the photobooth is installed as <code>systemctl</code>-service a restart can be triggered.</li> <li>Reload service is to gracefully reload all resources and backends.</li> <li>Install service: On linux automatically install the systemctl service</li> <li>Uninstall service: If service shall not start on boot, uninstall the service. The webfrontend is not accessible until manually started again or the service is installed like described in the installation.</li> </ul>"},{"location":"setup/admincenter/#maintain-gallery","title":"Maintain gallery","text":"<ul> <li>Delete all media files. Take care to backup your data first!</li> </ul>"},{"location":"setup/admincenter/#config","title":"Config","text":"<p>The configuration is divided in logical sections. After changing the config use the buttons to</p> <ul> <li>Persist: Send configuration to server, persist it on disk. Some changes will take effect only after restarting the service.</li> <li>Restore: Load current config from disk and display.</li> <li>Reset: Revert to default settings and delete config files from disk.</li> </ul> <p> </p> Configure the photobooth"},{"location":"setup/admincenter/#common","title":"Common","text":"<p>TODO</p>"},{"location":"setup/admincenter/#sharing","title":"Sharing","text":"<p>TODO</p>"},{"location":"setup/admincenter/#mediaprocessing","title":"Mediaprocessing","text":"<p>TODO</p>"},{"location":"setup/admincenter/#mediaprocessing-pipeline-singleimage","title":"Mediaprocessing Pipeline Singleimage","text":"<p>TODO</p>"},{"location":"setup/admincenter/#mediaprocessing-pipeline-collage","title":"Mediaprocessing Pipeline Collage","text":"<p>TODO</p>"},{"location":"setup/admincenter/#mediaprocessing-pipeline-printing","title":"Mediaprocessing Pipeline Printing","text":"<p>TODO</p>"},{"location":"setup/admincenter/#ui-settings","title":"UI Settings","text":"<p>TODO</p>"},{"location":"setup/admincenter/#backends","title":"Backends","text":"<p>TODO</p>"},{"location":"setup/admincenter/#hardware-input-output","title":"Hardware Input / Output","text":"<p>TODO</p>"},{"location":"setup/admincenter/#misc","title":"Misc","text":"<p>TODO</p>"},{"location":"setup/admincenter/#files","title":"Files","text":"<p>Manage your files in one place - the filebrowser. Useful to download captured images or upload custom files that can be used in pipeline stages like frames or background images.</p> <p>The filebrowser allows to</p> <ul> <li>create new folders</li> <li>upload files</li> <li>download zip files containing selected files and folders and</li> <li>delete selected files and folders.</li> </ul> <p> </p> Manage files in the filebrowser."},{"location":"setup/admincenter/#status","title":"Status","text":"<p>Some statistics, platform and system information. Also all logfiles are displayed.</p> <p> </p> See important information and logs in the status dashboard"},{"location":"setup/admincenter/#help","title":"Help","text":"<p>Collection of information that might be helpful. Also the REST-API documentation is linked. It's interactive, so you can test the REST-API right in your browser.</p> <p> </p> Some links on help page you might find useful."},{"location":"setup/camera_setup/","title":"Camera Setup","text":"<p>The photobooth app supports cameras utilizing multiple backends:</p> <ul> <li>picamera2 backend supports Raspberry Pi Camera Modules</li> <li>gphoto2 backend supports DSLR cameras on Linux platforms</li> <li>digicamcontrol backend supports DSLR cameras on Windows platforms (not yet implemented!)</li> <li>opencv2 backend supports USB webcameras on Linux and Windows platforms</li> <li>v4l2 backend supports USB webcameras on Linux</li> </ul> <p>Two backends can be used simultaneously in hybrid mode. The first backend is used as main backend to capture high quality still images. The second backend is used as live backend to stream video preview only.</p> <p>Note</p> <p>After changing config, the app needs to be restarted manually.</p> <p>If you need help setup a specific camera, start a new discussion on github.</p>"},{"location":"setup/camera_setup/#raspberry-csi-camera-modules","title":"Raspberry CSI Camera Modules","text":"<p>Camera modules are supported using picamera2 based on the new libcamera stack. Autofocus camera modules are supported.</p> <p>The app is tested with devices described in following chapters.</p> <p>Ensure the camera is working properly using the libcamera stack:</p> <pre><code>libcamera-hello\n</code></pre> <p>If it does properly open the camera, the photobooth app can use it also. If some errors come up, try to fix the camera setup before start using it actually. Find installation instructions directly at the raspberry pi foundation or the camera manufacturer.</p>"},{"location":"setup/camera_setup/#list-resolutions-supported-by-camera-module","title":"List resolutions supported by camera module","text":"<p>The photobooth switches between a high resolution camera mode (low fps, high cpu load) and a lower resolution camera mode (higher fps, lower cpu load). Time to find out which resolutions to use! Issue in the terminal following command:</p> <pre><code>libcamera-hello --list-cameras\n</code></pre> <p>The result will look like this:</p> <pre><code>Available cameras\n-----------------\n0 : imx519 [4656x3496] (/base/soc/i2c0mux/i2c@1/imx519@1a)\n    Modes: 'SRGGB10_CSI2P' : 1280x720 [120.00 fps - (1048, 1042)/2560x1440 crop]\n                            1920x1080 [60.05 fps - (408, 674)/3840x2160 crop]\n                            2328x1748 [30.00 fps - (0, 0)/4656x3496 crop]\n                            3840x2160 [18.00 fps - (408, 672)/3840x2160 crop]\n                            4656x3496 [9.00 fps - (0, 0)/4656x3496 crop]\n</code></pre> <p>The preferred settings derive as follows from the above output:</p> <ul> <li>Picamera2 Capture Cam Resolution Width = 4656</li> <li>Picamera2 Capture Cam Resolution Height = 3496</li> <li>Picamera2 Preview Cam Resolution Width = 2328</li> <li>Picamera2 Preview Cam Resolution Height = 1748</li> </ul> <p>Why? Capture shall be with highest resolution supported. The whole data is used from sensor, nothing cropped. The lower resolution is chosen to be 2328x1748 because the cropping is the same. The captured scene in both modes is exactly the same, nobody will notice that the camera changed it's mode - except better quality in final images :)</p>"},{"location":"setup/camera_setup/#camera-module-3","title":"Camera Module 3","text":"<p>The latest Camera Module 3 is probably the best camera module to use in the photobooth. It supports fast autofocus and comes with native driver in the Raspberry Pi OS.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>Set the main backend to Picamera2</li> <li>Choose Picamera2 focuser module, set Continuous for camera module 3</li> <li>Enable livepreview if desired</li> <li>Change the resolution requested from the camera for stills and preview, see table below.<ul> <li>Picamera2 Capture Cam Resolution Width = 4608</li> <li>Picamera2 Capture Cam Resolution Height = 2592</li> <li>Picamera2 Preview Cam Resolution Width = 2304</li> <li>Picamera2 Preview Cam Resolution Height = 1296</li> </ul> </li> <li>Restart the app</li> </ul> <p>For your reference the output of <code>libcamera-hello --list-cameras</code>:</p> Raspberry Pi Camera Module 3 (imx708)<pre><code>pi@photobooth:~ $ libcamera-hello --list-cameras\n0 : imx708 [4608x2592] (/base/soc/i2c0mux/i2c@1/imx708@1a)\n    Modes: 'SRGGB10_CSI2P' : 1536x864 [120.13 fps - (0, 0)/4608x2592 crop]\n                             2304x1296 [56.03 fps - (0, 0)/4608x2592 crop]\n                             4608x2592 [14.35 fps - (0, 0)/4608x2592 crop]\n</code></pre>"},{"location":"setup/camera_setup/#camera-modules-12hq","title":"Camera Modules 1/2/HQ","text":"<p>All other camera modules from the Raspberry Pi ecosystem work the same way as the latest camera module 3. They usually come with lower image quality and do not have autofocus. Due to this other camera modules are not recommended for use as main camera. You might consider to use them only for livestream preview.</p> <p>Setup is the same as for camera module 3 but with different resolution and no focuser module enabled. See also the chapter above to list resolutions.</p>"},{"location":"setup/camera_setup/#arducam-imx519","title":"Arducam imx519","text":"<p>Sony's imx519 sensor used in Arducam's imx519 camera module is supported by the Raspberry Pi OS natively since about March 2023.</p> <p>This means the module can be used with or without installing Arducams custom driver packages:</p> <ul> <li>without Arducams driver:<ul> <li>\u2796No PDAF support</li> <li>\u2796Only interval based autofocus e.g. every 10 seconds</li> <li>\u2795More stable upgrades because no customized libcamera needs to be installed.</li> <li>install as described in discussions</li> </ul> </li> <li>with Arducams driver:<ul> <li>\u2795PDAF support</li> <li>\u2795Continuous autofocus like camera module 3</li> <li>\u2796apt upgrade may break driver/libcamera from time to time</li> <li>install as described by Arducam</li> </ul> </li> </ul> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Picamera2</li> <li>Choose Picamera2 focuser module, set Continuous if Arducams driver installed, otherwise choose Interval.</li> <li>Enable livepreview if desired</li> <li>Change the resolution requested from the camera for stills and preview, see table below.<ul> <li>Picamera2 Capture Cam Resolution Width = 4656</li> <li>Picamera2 Capture Cam Resolution Height = 3496</li> <li>Picamera2 Preview Cam Resolution Width = 2328</li> <li>Picamera2 Preview Cam Resolution Height = 1748</li> </ul> </li> <li>Restart the app</li> </ul> <p>For your reference the output of <code>libcamera-hello --list-cameras</code>:</p> Arducam 16MP (imx519)<pre><code>pi@photobooth:~ $ libcamera-hello --list-cameras\nAvailable cameras\n-----------------\n0 : imx519 [4656x3496] (/base/soc/i2c0mux/i2c@1/imx519@1a)\n    Modes: 'SRGGB10_CSI2P' : 1280x720 [120.00 fps - (1048, 1042)/2560x1440 crop]\n                            1920x1080 [60.05 fps - (408, 674)/3840x2160 crop]\n                            2328x1748 [30.00 fps - (0, 0)/4656x3496 crop]\n                            3840x2160 [18.00 fps - (408, 672)/3840x2160 crop]\n                            4656x3496 [9.00 fps - (0, 0)/4656x3496 crop]\n</code></pre>"},{"location":"setup/camera_setup/#other-third-party-camera-modules","title":"Other third party camera modules","text":"<p>In principle every camera supported by libcamera / picamera2 would work. Since the cameras do not come with native support of the Raspberry Pi OS using them could be troublesome and it's untested. Start a discussion if there is a camera not working properly.</p>"},{"location":"setup/camera_setup/#dslr-via-gphoto2-linux","title":"DSLR via gphoto2 (Linux)","text":"<p>The app is tested with a Canon 1100D. In general all gphoto2 supported cameras can be used. If the camera supports liveview a stream is created and being used as preview in the app. If the camera does not support liveview, you might want to consider setup the app in hybrid mode. Main camera would be the DSLR to take high quality images, the livestream is captured from a secondary backend. As secondary backend most suitable is a webcamera or raspberry pi camera module.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Gphoto2</li> </ul> <p>DSLR cameras of different manufacturer may behave differently. There are some settings that might need to be adjusted if autofocus is slow or preview cannot be generated. Tinker with available settings until it works properly. If you run into trouble, create a new issue in the tracker.</p>"},{"location":"setup/camera_setup/#dslr-via-digicamcontrol-windows","title":"DSLR via digicamcontrol (Windows)","text":"<p>Implementation not yet finished, feel free to contribute \ud83d\ude0a</p>"},{"location":"setup/camera_setup/#webcam","title":"Webcam","text":"<p>USB-webcams are integrated via two backends:</p> <ul> <li>Opencv2 (Linux/Windows) and</li> <li>v4l2 (Linux only).</li> </ul> <p>On Linux prefer v4l2 backend because it is more efficient in directly streaming MJPG data instead image frames like the opencv2 implementation.</p> <p>To use the webcam choose opencv2 or v4l2 as backend.</p> <p>Both backends use a camera device index to open the camera. To find which indexes are available on your system issue the following commands.</p> check v4l2 indexes:<pre><code>python -c \"from photobooth.services.backends.webcamv4l import *; print(available_camera_indexes())\"\n</code></pre> check opencv2 indexes:<pre><code>python -c \"from photobooth.services.backends.webcamcv2 import *; print(available_camera_indexes())\"\n</code></pre> <p>The command returns an array of indexes for which a webcam was detected.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the backend (cv2 or v4l) as main backend</li> <li>Consider changing the resolution requested from the camera on common tab.</li> </ul>"},{"location":"setup/camera_setup/#hybrid-dslr-and-second-backend-to-stream","title":"Hybrid: DSLR and second backend to stream","text":"<p>The app supports simultaneous use of two backends at the same time. This is useful to grab high quality pictures from a DSLR camera via gphoto2 and livestream from a webcamera or picamera module. Hybrid mode allows for live preview even if the DSLR camera is not capable to stream preview video.</p> <p>In hybrid mode, the main backend is used for still images, the live backend for video streaming. To enable hybrid mode:     - configure main backend as normal     - also configure live backend.</p> <p>If a live backend is set, it is requested for video preview instead of the main backend.</p>"},{"location":"setup/gpio/","title":"Raspberry Pi GPIO","text":"<p>The photobooth supports Raspberry Pi GPIO to trigger certain events. Currently supported triggers are:</p> <ul> <li>Shutdown host, default GPIO 17, hold 2 seconds</li> <li>Reboot host, default GPIO 18, hold 2 seconds</li> <li>Take picture, default GPIO 27, press</li> <li>Print most recent image, default GPIO 22, press</li> </ul> <p>Internally gpiozero python implementation is used.</p>"},{"location":"setup/gpio/#raspberry-pi-gpio-wiring","title":"Raspberry Pi GPIO wiring","text":"<p>To use the hardware triggers wire a normally open button from GND to the designated GPIO. For example connect the button to GND and GPIO 17.</p> <p> source</p>"},{"location":"setup/gpio/#configure","title":"Configure","text":"<p>In the admin panel tab hardwareinput enable the GPIO feature in general. Change the default GPIO numbers according to your wiring.</p>"},{"location":"setup/installation/","title":"Installation \ud83d\udd27","text":"<p>The app is available as PyPI package. Follow this guide to install.</p> <p>You have seen the 3d printable photobooth box? Check out the photobooth box!</p>"},{"location":"setup/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or later. Python 3.12 is not yet supported.</li> <li>If Raspberry Pi: 64bit system, Bullseye and Bookworm are supported.</li> <li>Camera, can be one or two (first camera for stills, second camera for live view)<ul> <li>DSLR: gphoto2 on Linux</li> <li>RPI Camera Modules / Arducams: installed and working (test with <code>libcamera-hello</code>)</li> <li>Webcamera: no additional prerequisites, ensure camera is working using native system apps</li> </ul> </li> </ul>"},{"location":"setup/installation/#reference-systems","title":"Reference Systems","text":"<p>The photobooth-app is written in python and itself platform independent. Nevertheless, depending on the camera backend or peripheral hardware the hardware-platform to use can be restricted to a specific one like a Raspberry Pi.</p> <p>These are systems used productive or in automated testing and most likely to work without issues. Gphoto2 and the webcam backends support many different camera models but manufacturers might implement communication protocols slightly different. If you run into issues, create an issue or open a discussion. Also check the camera manufacturers manuals for their camera installation guides.</p> Hardware-Platform Software-Platform Cameras Raspberry Pi 5 Raspberry Pi OS Bookworm  64bit No hardware to test yet! Raspberry Pi 3/4 Raspberry Pi OS Bookworm 64bit original camera module Raspberry Pi 3/4 Raspberry Pi OS Bullseye 64bit original camera module Raspberry Pi 3/4 Raspberry Pi OS Bullseye 64bit Canon 1100D Raspberry Pi 3/4 Raspberry Pi OS Bullseye 64bit Arducam IMX519 PDAF <p>If you have tested additional software/hardware-platform, please let me know and I add it to the list.</p>"},{"location":"setup/installation/#system-preparation","title":"System Preparation","text":""},{"location":"setup/installation/#raspberrypi-os","title":"RaspberryPi OS","text":"<p>On a fresh Raspberry Pi OS 64bit, run following commands:</p>"},{"location":"setup/installation/#update-system","title":"Update System","text":"<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre>"},{"location":"setup/installation/#install-system-dependencies","title":"Install system dependencies","text":"<p>Following dependencies to be installed for Raspberry Pi OS 64bit. Adjust for debian/ubuntu. Picamera2 is only available on Raspberry Pi.</p> <pre><code># basic stuff (Bullseye/Bookworm)\nsudo apt-get -y install libturbojpeg0 python3-pip libgl1 libgphoto2-dev fonts-noto-color-emoji rclone inotify-tools\n# to use camera modules on rpi (Bullseye/Bookworm)\nsudo apt-get -y install python3-picamera2\n# fix numpy dependency in 1.2.6 (Bookworm only)\nsudo apt-get -y install libopenblas-dev\n# fix opencv dependency (Bookworm only)\nsudo apt-get -y install libatlas-base-dev\n</code></pre>"},{"location":"setup/installation/#tweak-system-settings","title":"Tweak system settings","text":"<p>To use hardware input from keyboard or presenter, the current user needs to be added to tty and input group.</p> <pre><code>sudo usermod --append --groups tty,input $(whoami)\n#example: sudo usermod --append --groups tty,input pi\n</code></pre>"},{"location":"setup/installation/#debianubuntu","title":"Debian/Ubuntu","text":"<p>There are no dedicated installation instructions available by now. It should work similar to Raspberry Pi installation, please try these. Feel free to send a pull request to improve the instructions.</p>"},{"location":"setup/installation/#windows","title":"Windows","text":"<p>While using the app on windows works, there is no documentation yet. Also use is limited by now, because the digicamcontrol software is not yet implemented. Only webcams can be used on windows right now.</p>"},{"location":"setup/installation/#install-photobooth-app","title":"Install photobooth app","text":"<p>Several ways to install:</p> <ol> <li>Method A: Install using pipx (easiest, recommended for Bookworm)</li> <li>Method B: Install using venv</li> <li>Method C: Install globally (recommended for Bullseye)</li> </ol> <p>It's preferred nowadays to install pypi packages in virtual environments. Latest Linux OS' start implementing externally managed base environments now. The easiest solution to install is using pipx.</p>"},{"location":"setup/installation/#method-a-install-using-pipx","title":"Method A: Install using pipx","text":"<p>Use the following commands to install with pipx in an virtual environment:</p> <pre><code># install pipx from repo - if not avail check pipx website\nsudo apt-get -y install pipx\n# ensure path is registered and app globally available\npipx ensurepath\n# initialize a pipx installation\n# allow import of system-site-packages as picamera2 is globally installed via apt in system-site\npipx install --system-site-packages photobooth-app --pip-args='--prefer-binary'\n</code></pre>"},{"location":"setup/installation/#method-b-install-using-venv","title":"Method B: Install using venv","text":"<p>Use the following commands to install in a virtual environment:</p> <pre><code># create empty directory\nmkdir ~/photobooth-app\n# change to new directory\ncd ~/photobooth-app\n# initialize a new venv called myenv\n# allow import of system-site-packages as picamera2 is globally installed via apt in system-site\npython -m venv --system-site-packages myenv\n# activate the newly created env\nsource myenv/bin/activate\n# install photobooth-app\npython -m pip install --prefer-binary photobooth-app\n</code></pre> <p>Note: <code>--prefer-binary</code> is added to avoid compiling opencv and instead prefer the wheel which installs within minutes instead hours.</p>"},{"location":"setup/installation/#method-c-install-globally","title":"Method C: Install globally","text":"<p>This method was default in the past.</p> <pre><code># install photobooth-app\npip install --prefer-binary photobooth-app\n</code></pre>"},{"location":"setup/installation/#first-start","title":"First start","text":""},{"location":"setup/installation/#create-data-folder","title":"Create data folder","text":"<p>The photobooth-app automatically uses the current folder as data folder. All images, logs and config files will be stored in this folder.</p> <pre><code>mkdir ~/photobooth-data\n</code></pre>"},{"location":"setup/installation/#start-the-app","title":"Start the app","text":"<pre><code>cd ~/photobooth-data\n\n# following only if installed via venv method\nsource ~/photobooth-app/myenv/bin/activate\n\n# start app. Current dir will be used as working-directory!\nphotobooth\n</code></pre> <p>Browse to http://localhost:8000 and see if the app is working properly. Per default the app uses a generated image and displays a timer only. No camera is started at this point. You need to continue setting up the cameras.</p> <p>Info</p> <p>Have issues accessing the website or see error messages during installation and app startup? Check the troubleshooting guide.</p>"},{"location":"setup/installation/#setup-system-service","title":"Setup system service","text":"<p>To automatically start the photobooth-app it shall be installed as a service.</p>"},{"location":"setup/installation/#automatic-service-setup","title":"Automatic service setup","text":"<p>Once the photobooth-app was started the service can be installed automatically on Linux systems. Choose in the Admin Center -&gt; Dashboard -&gt; Server Control -&gt; Install Service. After confirmation the service is installed as described below for manual setup. If the setup fails, please install manually.</p>"},{"location":"setup/installation/#manual-service-setup","title":"Manual service setup","text":"<p>Now that you ensured, the photobooth app is working properly, it's time to setup the app as a service. If you installed the app according to above instructions, the template .service file works for you.</p> <p>Create the following file at the given location:</p> ~/.local/share/systemd/user/photobooth-app.service<pre><code>[Unit]\nDescription=photobooth-app\nAfter=default.target\n\n[Service]\nType=simple\nRestart=always\n#you might want to adjust following lines\nWorkingDirectory=%h/photobooth-data/\nExecStart=python -O -m photobooth\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Now enable the service and start it:</p> <pre><code>systemctl --user daemon-reload\nsystemctl --user enable photobooth-app.service\nsystemctl --user start photobooth-app.service\n</code></pre> <p>Info</p> <p>The service does not start? Check the troubleshooting guide. Following commands might be helpful: <pre><code>systemctl --user status photobooth-app.service\n</code></pre> <pre><code>journalctl --user --unit photobooth-app.service\n</code></pre></p>"},{"location":"setup/installation/#desktop-shortcut-to-webfrontend","title":"Desktop shortcut to webfrontend","text":"<p>Create the following file at the given location:</p> ~/Desktop/photobooth-app.desktop<pre><code>[Desktop Entry]\nVersion=1.3\nTerminal=false\nType=Application\nName=Photobooth-App\nExec=chromium-browser --kiosk http://localhost:8000/ --noerrdialogs --disable-infobars --no-first-run --check-for-update-interval=31536000 --touch-events=enabled --password-store=basic\nStartupNotify=false\n</code></pre>"},{"location":"setup/installation/#autostart-webfrontend-on-system-startup","title":"Autostart webfrontend on system startup","text":"<p>Create the same file as for desktop shortcut above and place it in <code>/etc/xdg/autostart/photobooth-app.desktop</code>. After reboot chromium will start automatically.</p>"},{"location":"setup/installation/#install-development-version","title":"Install development version","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version install directly from git:</p> <pre><code>pip install git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"setup/mediaprocessing/","title":"Postprocess Images and Collages","text":"<p>The mediaitems (images, videos, gifs) are postprocessed in a configurable pipeline consisting of several stages. The pipeline starts with the original mediaitem. Next is the stage to remove a greenscreen, add texts and a new background. The final processed item is stored to the gallery.</p>"},{"location":"setup/mediaprocessing/#examples","title":"Examples","text":""},{"location":"setup/mediaprocessing/#single-images","title":"Single Images","text":"<p>TODO: add example image</p>"},{"location":"setup/mediaprocessing/#collages","title":"Collages","text":"<p>Collages are merged from several images. These can be captured images from camera and being mixed with predefined images. Each capture can be modified, eg. remove the greenscreen and add a new background before merging in the collage. Following is an example how the collage is processed:</p> <p></p>"},{"location":"setup/mediaprocessing/#pipelines","title":"Pipelines","text":"<p>Depending on the job type</p> <ul> <li>single picture or</li> <li>collage or</li> <li>printing</li> </ul> <p>there are different postprocess pipelines available. They can be configured in the admin dashboard. The pipeline consists of several stages, each can be enabled and configured separately.</p>"},{"location":"setup/mediaprocessing/#basics","title":"Basics","text":"<ul> <li>Coordinate system: 0/0 is top/left.</li> </ul>"},{"location":"setup/mediaprocessing/#picture-pipeline","title":"Picture-Pipeline","text":"<p>The single image pipeline runs following stages in given sequence:</p> <ol> <li>remove chromakey (greenscreen removal), replace by transparency</li> <li>apply pilgram2 filter (instagram like filters)</li> <li>fill background with a solid color</li> <li>add background image (useful only if no solid color was added)</li> <li>add a frame with transparent areas. Captured images shine through transparent area. Use PNGs with transparency!</li> <li>text overlay</li> </ol>"},{"location":"setup/mediaprocessing/#collage-pipeline","title":"Collage-Pipeline","text":"<p>The collage pipeline runs following stages in given sequence:</p> <ol> <li>run single images stages (chromakey, pilgram2, background only)</li> <li>merge captured images and predefined images on one canvas</li> <li>fill background with a solid color</li> <li>add background image (useful only if no solid color was added)</li> <li>place image on top. Captured images shine through transparent area. Use PNGs with transparency!</li> <li>text overlay</li> </ol> <p></p>"},{"location":"setup/mediaprocessing/#gifvideo-pipeline","title":"GIF/Video-Pipeline","text":"<p>Feature not yet implemented. You're invited to contribute \ud83d\udc4b</p>"},{"location":"setup/mediaprocessing/#print-pipeline","title":"Print-Pipeline","text":"<p>Feature not yet implemented. You're invited to contribute \ud83d\udc4b</p>"},{"location":"setup/mediaprocessing/#stages","title":"Stages","text":""},{"location":"setup/mediaprocessing/#chromakeying","title":"Chromakeying","text":"<p>Remove a color from the captured image. Removed parts will be transparent. TODO: add more description about how to choose the green value.</p>"},{"location":"setup/mediaprocessing/#instagram-like-color-filter","title":"Instagram-Like Color-Filter","text":"<p>Apply a default color filter. Choose from pilgram2's available filters. There is also the option for the user to change the filter in the gallery. See UI configuration in admin dashboard.</p>"},{"location":"setup/mediaprocessing/#background-fill-solid-color","title":"Background Fill Solid Color","text":"<p>When using the chromakeying / background removal stages, the removed background is left empty and transparent. With this stage, the transparent area is filled with a solid color.</p>"},{"location":"setup/mediaprocessing/#background-image","title":"Background Image","text":"<p>When using the chromakeying / background removal stages, the removed background is left empty and transparent. With this stage, the transparent area is filled with an image.</p>"},{"location":"setup/mediaprocessing/#frame-image","title":"Frame Image","text":"<p>Single images captured can be overlaid by a frame. For this stage you need a PNG with transparent area. The captured image will be inserted in the transparent area. The width and height of the transparent area is automatically calculated and the algorithm tries to fit most of the captured area. If aspect ratio of captured image and transparent area are very different, some parts of the captured image can be cropped.</p>"},{"location":"setup/mediaprocessing/#texts","title":"Texts","text":"<p>Texts that are overlaid the finished image. Use it to easily individualize the images without having to create a new background images where a picture would get inserted to. Custom fonts are supported.</p>"},{"location":"setup/printing/","title":"Printing","text":"<p>Setup printing allows to get a hardcopy of the images and collages. Prints can be triggered by</p> <ul> <li>Touchscreen button in gallery</li> <li>GPIO (Raspberry Pi only)</li> <li>keyboard input</li> <li>API</li> </ul>"},{"location":"setup/printing/#working-principle","title":"Working Principle","text":"<p>The user can choose an image in the gallery to print. In the background, the photobooth-app invokes a custom command, that needs to be set. This way, printing works on all platforms where a print command is available. There is no feedback to photobooth app about the status of the print job or the printer itself. If the paper is empty the photobooth app is not aware of that.</p>"},{"location":"setup/printing/#general-setup","title":"General Setup","text":"<p>The configuration is made in the Admin Center -&gt; Config -&gt; Tab: HardwareInputOutput.</p> <ul> <li>Enable printservice in general</li> <li>Set a time to block new print jobs. The user needs to wait this time until a new print job can be triggered.</li> <li>The command to print is specific to your platform (Windows/Linux) and setup. Following are some recommendation help you to start.</li> </ul> <p>Info</p> <p>Test printing with a virtual PDF printer: https://wiki.ubuntuusers.de/CUPS-PDF/</p>"},{"location":"setup/printing/#setup-on-linux","title":"Setup on Linux","text":"<p>On Linux printing is realized with CUPS software. The cups webinterface is available on http://localhost:631/printers/ usually. The link only works from the Linux system itself, it's not available in the local network. Installing a printer is very individual to the specific printer and the setup. Try to install on your own. In the end, make sure the following command prints a photo. Instead of {filename} point to some image on the computer for testing.</p> <p>Following is an example to print. Set the command in the app. {filename} is replaced by the .jpg image to print when the job is run.</p> <pre><code>lp -d PRINTER_NAME_HERE -o landscape -o fit-to-page {filename}\n</code></pre> <p>If you use other commands, that work better in your installation, let me know in GitHub Discussions.</p> <p>Info</p> <p>You might want to update to more recent driver packages. See following guide: https://www.peachyphotos.com/blog/stories/building-modern-gutenprint/ Also you might need a ppd file. Here is one for Canon Selphy CP1300 that works.</p>"},{"location":"setup/printing/#setup-on-windows","title":"Setup on Windows","text":"<p>As first start use mspaint to test printing. Use following print command on windows.</p> <pre><code>mspaint /p {filename}\n</code></pre> <p>If you use other commands, that work better in your installation, let me know in GitHub Discussions.</p>"},{"location":"setup/printing/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>check photobooth error log</li> </ul>"},{"location":"setup/shareservice/","title":"Share images via QR Code","text":"<p>The share service allows users to easily download images on the user's phone. The user simply scans the QR code to download.</p> <p> </p> Scan the QR code to download image to smartphones."},{"location":"setup/shareservice/#options-to-share-via-qr-code","title":"Options to share via QR code","text":"<ol> <li>Use the batteries included shareservice.</li> <li>Sync images (on your own) and provide a custom URL users can download images</li> </ol>"},{"location":"setup/shareservice/#batteries-included-shareservice","title":"Batteries included shareservice","text":""},{"location":"setup/shareservice/#benefits","title":"Benefits","text":"<ul> <li>secure: the photobooth does not need to expose a service to the internet</li> <li>saves data: only images that are requested via QR code are transferred via internet</li> <li>works also with cellular internet service that usually provide no public ip address</li> <li>simple: just one php file to setup</li> </ul>"},{"location":"setup/shareservice/#working-principle","title":"Working Principle","text":"<p>It's developed with ease of use in mind and shall work on most systems even with firewalled internet connection on photobooth side like cellular services. Once setup, the prinicple is as following:</p> <ul> <li>photobooth starts and creates a long-term connection via internet (wifi, ethernet or cellular) to a php script on your webhosting service.</li> <li>now if a QR code is scanned, the php script sends an upload request via the long-term connection to the photobooth</li> <li>the photobooth uploads the requested file</li> <li>once upload is finished, the image is displayed to the user</li> </ul>"},{"location":"setup/shareservice/#setup","title":"Setup","text":"<ul> <li>download dl.php</li> <li>edit the config variables on top of dl.php. see the comments in dl.php for reference.</li> <li>place the edited dl.php on a public server, for example your shared hoster. The server must be available to the photobooth and the users downloading photos later.</li> <li>Pair the dl.php script with photobooth app by configuring the shareservice settings in photobooth admin config, tab common:<ul> <li>set shareservice_apikey to same value as in dl.php</li> <li>set shareservice_url to the public URL pointing to the dl.php script.</li> <li>choose whether to download the original file or the full processed version.</li> </ul> </li> <li>Now restart the photobooth app and try to scan a QR code in the gallery.</li> </ul>"},{"location":"setup/shareservice/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>check php error log in the folder where dl.php is located</li> <li>check photobooth error log</li> </ul>"},{"location":"setup/shareservice/#use-your-own-sharing-solution","title":"Use your own sharing solution","text":"<p>If the shareservice is not what you want, you can synchronize the data folder manually and share a link to the images. The QR code is pointing to an URL that needs to be accessible by the users smartphone. This is possible if the user connects to a local hotspot in the same network as the photobooth computer or the files can be uploaded to the internet to make them accessible.</p>"},{"location":"setup/update/","title":"Update","text":"<p>Info</p> <p>Depending on your installation method, choose the update method.</p>"},{"location":"setup/update/#method-a-update-with-pipx","title":"Method A: Update with pipx","text":"<pre><code>pipx upgrade photobooth-app\n</code></pre>"},{"location":"setup/update/#method-b-virtual-environment-pip-upgrade","title":"Method B: Virtual environment pip upgrade","text":"<p>To upgrade to the latest release use pip:</p> <pre><code># activate local venv before update\nsource ~/photobooth-app/myenv/bin/activate\n\npip install --upgrade photobooth-app\n</code></pre>"},{"location":"setup/update/#method-c-global-pip-upgrade","title":"Method C: Global pip upgrade","text":"<p>To upgrade to the latest release use pip:</p> <pre><code>pip install --upgrade photobooth-app\n</code></pre> <p>Afterwards restart the photobooth. If the app doesn't show up again, check the troubleshooting page.</p>"},{"location":"setup/update/#update-to-development-versions","title":"Update to development versions","text":"<p>Stable releases are published at PyPI registry usually. Update to development versions only if requested or you know what you do.</p> <p>To test the latest development version update directly from git:</p> <pre><code># example if installed via pipx\npip upgrade git+https://github.com/mgrl/photobooth-app.git@main\n\n# activate local venv before update if installed in venv\nsource ~/photobooth-app/myenv/bin/activate\n\n# upgrade to main-branch\npip install --upgrade --force-reinstall --no-deps git+https://github.com/mgrl/photobooth-app.git@main\n\n# or upgrade to dev-branch\npip install --upgrade --force-reinstall --no-deps git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre> <p>Info</p> <p>If dependencies changed remove <code>--no-deps</code> from above commands to also update pip packages the app relies on.</p>"},{"location":"support/","title":"Support","text":"<p>Find support on these channels:</p> <ul> <li>Pages here, for example in the troubleshooting guide or in the frequently asked questions.</li> <li>Search the site</li> <li>Open a discussion on github.</li> <li>Create an issue ticket on github.</li> </ul>"},{"location":"support/faq/","title":"FAQ","text":""},{"location":"support/faq/#photobooth-app-website-not-available","title":"Photobooth app website not available","text":"<p>In default configuration the app listens to port 8000, so it can be reached from every computer in the same network on port 8000. On the same computer go to http://localhost:8000.</p> <p>If the website is not available, the reason could be</p> <ul> <li>network issues or</li> <li>bad configuration</li> </ul> <p>Check that the website is available on the device itself via http://localhost:8000. If that works, the issue is about the network.</p> <p>If not, the app might have crashed.</p>"},{"location":"support/faq/#photobooth-command-not-found","title":"Photobooth command not found","text":"<p>If there is a warning as following during pip installation and photobooth can't start check the PATH variable</p> <p>The script <code>photobooth</code> is installed in '/home/pi/.local/bin' which is not on PATH. Consider adding this directory to PATH.</p> <p>See following is fine, might just need a restart after installation because the path .local/bin did not exist on newly installed systems.</p> ~/.profile<pre><code># set PATH so it includes user's private bin if it exists\nif [ -d \"$HOME/.local/bin\" ] ; then\n    PATH=\"$HOME/.local/bin:$PATH\"\nfi\n</code></pre>"},{"location":"support/faq/#gphoto2-camera-found-but-no-access","title":"Gphoto2 camera found but no access","text":"<p>On a fresh Linux installation, there might be services running to detect cameras and allow for easy file transfer. For the photobooth this needs to be disabled because the application needs access to the camera.</p> <p>If you find errors in the log as below, read further.</p> <pre><code>[    INFO] found camera - 0:  usb:001,009  Canon EOS 1100D (gphoto2.py:303)\n[    INFO] (gp_libusb1_open [libusb1.c:437]) 'libusb_claim_interface (port-&gt;pl-&gt;dh, port-&gt;settings.usb.interface)' failed: Resource busy (-6) (port_log.py:89)\n[    INFO] (gp_port_set_error [gphoto2-port.c:1190]) Could not claim interface 0 (Success). Make sure no other program (gvfs-gphoto2-volume-monitor) or kernel module (such as sdc2xx, stv680, spca50x) is using the device and you have read/write access to the device. (port_log.py:89)\n[CRITICAL] camera failed to initialize. no power? no connection? (gphoto2.py:100)\n[   ERROR] [-53] Could not claim the USB device (gphoto2.py:101)\n[    INFO] (gp_libusb1_open [libusb1.c:437]) 'libusb_claim_interface (port-&gt;pl-&gt;dh, port-&gt;settings.usb.interface)' failed: Resource busy (-6) (port_log.py:89)\n[    INFO] (gp_port_set_error [gphoto2-port.c:1190]) Could not claim interface 0 (Success). Make sure no other program (gvfs-gphoto2-volume-monitor) or kernel module (such as sdc2xx, stv680, spca50x) is using the device and you have read/write access to the device. (port_log.py:89)\n</code></pre> <p>Check for running processes:</p> <pre><code>$ ps ax | grep gphoto2\n1074 ?        Ssl    0:00 /usr/libexec/gvfs-gphoto2-volume-monitor\n2785 ?        Sl     0:00 /usr/libexec/gvfsd-gphoto2 --spawner :1.7 /org/gtk/gvfs/exec_spaw/2\n</code></pre> <p>To disable the monitoring services, execute following commands:</p> <pre><code>systemctl --user stop gvfs-gphoto2-volume-monitor\nsystemctl --user disable gvfs-gphoto2-volume-monitor \n\n# after a reboot, the gvfs-gphoto2-volume-monitor will be enabled automatically again :(\n# permanently disable:\nsudo chmod -x /usr/lib/gvfs/gvfs-gphoto2-volume-monitor\n\nreboot\n</code></pre> <p>After a restart there should be no process any more:</p> <pre><code>$ ps ax | grep gphoto2\n# nothing to see here...\n</code></pre> <p>Additional references:</p> <ul> <li>https://github.com/gphoto/gphoto2/issues/181</li> </ul>"},{"location":"support/faq/#error-failed-building-wheel-for-component","title":"Error Failed building wheel for component","text":"<pre><code>ERROR: Failed building wheel for cmake\n      Failed to build cmake\n      ERROR: Could not build wheels for cmake, which is required to install pyproject.toml-based projects\n</code></pre> <p>During pip installation cmake error can come up if not all prerequisites are complied with.</p> <ul> <li>Check to comply with prerequisites.</li> <li>OpenCV-python fails during installation on 32 bit Raspberry Pi OS. Use 64bit version.</li> </ul> <p>Check discussions for further help!</p>"},{"location":"support/troubleshooting/","title":"Troubleshooting","text":""},{"location":"support/troubleshooting/#gather-information-to-troubleshoot","title":"Gather information to troubleshoot","text":"<p>The following commands help tracking down issues and gather information:</p> <pre><code># logfiles from service (last 200 lines)\njournalctl --user --unit=photobooth-app -n 200 --no-pager\n\n# logfiles created by photobooth every day\nls ~/photobooth-data/log/\ncat ~/photobooth-data/log/photobooth_2023xxxx.log\n\n# check CmaFree especially for Arducams if low:\ncat /proc/meminfo\n</code></pre>"},{"location":"support/troubleshooting/#manually-start-the-app","title":"Manually start the app","text":"<p>If service crashed \ud83d\udc80, stop the service and maybe even kill the python process:</p> <pre><code># stop the photobooth service (if installed)\nsystemctl --user stop photobooth-app\n\n# check whether there is a process still running but not responsive:\nps ax | grep python3\n\n# kill it\nsudo pkill -9 python3\n</code></pre> <p>Manually start the photobooth-app and watch the terminal</p> <p>Info</p> <p>The app uses current directory as data directory! Ensure to <code>cd</code> to the correct directory before starting.</p> <pre><code>photobooth\n#or\npython -m photobooth\n</code></pre> <p>Watch the terminal for errors and try to debug. If you fail, start a discussion.</p>"}]}