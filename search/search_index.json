{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Photobooth App","text":"<p>Github - PyPI package - 3d printable case</p> <p>The photobooth app is written in Python \ud83d\udc0d and coming along with a modern Vue frontend. This site contains the project documentation for the photobooth app project. The app is written in python. Setup your own photobooth for your wedding, birthday and other occations.</p> <p></p>"},{"location":"#table-of-contents","title":"Table Of Contents","text":"<ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol>"},{"location":"basicconfig/","title":"Basic Configuration","text":""},{"location":"basicconfig/#raspberry-camera-modules","title":"Raspberry Camera Modules","text":"<p>todo</p>"},{"location":"basicconfig/#dslr-via-gphoto2-on-linux-platform","title":"DSLR via gphoto2 on Linux platform","text":"<p>todo</p>"},{"location":"basicconfig/#webcam","title":"Webcam","text":"<p>todo</p>"},{"location":"basicconfig/#hybrid-dslr-and-webcam","title":"Hybrid: DSLR and Webcam","text":"<p>todo</p>"},{"location":"contribute/","title":"\ud83d\ude80 Contribute","text":"<p>If you find an issue, please post it https://github.com/mgrl/photobooth-app/issues</p>"},{"location":"contribute/#development","title":"Development","text":"<p>Develop on Windows or Linux using VScode. Additional requirements</p> <ul> <li>backend development</li> <li>pip install pipreqs</li> <li>pip install pytest</li> <li>frontend development</li> <li>nodejs 16 (nodejs 18 fails proxying the devServer)</li> <li>yarn</li> <li>quasar cli https://quasar.dev/start/quasar-cli</li> </ul>"},{"location":"contribute/#testing","title":"Testing","text":"<p>Tests are run via Github Actions on push and pull requests. The tests run in the Cloud on hosted Github runners as well as on a self-hosted runner for hardware testing.</p>"},{"location":"contribute/#selfhosted-github-runner","title":"Selfhosted Github Runner","text":"<p>Supports additional tests for hardware:</p> <ul> <li>Raspberry Pi Camera Module 3 connected to test picamera2 and autofocus algorithms</li> <li>WLED module is connected to test LED effects on thrill and shoot</li> <li>gphoto2 is installed with virtual ptp device</li> <li>install latest dev with gphoto2 updater,  modify configure command as described here https://github.com/gphoto/libgphoto2/issues/408)</li> <li>add photos libgphoto provides when capture is requested to /usr/share/local/libgphoto2_port/xxxversion/vcamera/</li> <li>webcamera is connected to test cv2 and v4l backends</li> </ul>"},{"location":"extras/","title":"Extras","text":""},{"location":"extras/#wled-integration-for-led-signaling","title":"WLED integration for LED signaling","text":"<p>Add animated lights to your photobooth powered by WLED. WLED is a fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs.</p> <p>Head over to https://kno.wled.ge/basics/getting-started/ for installation instructions and hardware setup. Connect the ESP board via USB to the photobooth computer.</p> <p>In the WLED webfrontend define three presets:</p> <ul> <li>ID 1: standby (usually LEDs off)</li> <li>ID 2: countdown (animates countdown)</li> <li>ID 3: shoot (imitate a flash)</li> </ul> <p>Please define presets on your own in WLED webfrontend. Once added, in the photobooth enable the WLED integration and provide the serial port. Check logs on startup whether the module is detected correctly.</p>"},{"location":"extras/#sync-online-for-file-downloads-via-qr-code","title":"Sync Online (for file downloads via QR Code)","text":"<pre><code>sudo apt-get install rclone inotify-tools\n</code></pre> <pre><code>rclone config\n</code></pre> <p>Setup the remote named \"boothupload\"!</p> <pre><code>chmod u+x ~/photobooth-app/boothupload.sh\ncp ~/photobooth-app/boothupload.service ~/.config/systemd/user/\nsystemctl --user enable boothupload.service\nsystemctl --user start boothupload\nsystemctl --user status boothupload\n</code></pre>"},{"location":"extras/#setup-wifi-and-hotspot","title":"Setup Wifi and Hotspot","text":"<p>At home prefer local wifi with endless data. If this is not available connect to a mobile hotspot for online sync.</p> <p>In file /etc/wpa_supplicant/wpa_supplicant.conf set a priority for local and hotspot wifi:</p> <pre><code>network={\n    ssid=\"homewifi\"\n    psk=\"passwordOfhomewifi\"\n    priority=10\n}\nnetwork={\n   ssid=\"mobileexpensivewifi\"\n   psk=\"passwordOfmobileexpensivewifi\"\n   priority=5\n}\n</code></pre>"},{"location":"installation/","title":"\ud83d\udd27 Installation","text":""},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or later</li> <li>Camera, can be one or two (first camera for stills, second camera for live view)</li> <li>DSLR: gphoto2 on Linux</li> <li>Picamera2: installed and working (test with <code>libcamera-hello</code>)</li> <li>Webcamera: no additional prerequisites, ensure camera is working using native system apps</li> <li>Raspberry Pi Bullseye for Picamera2 or any other linux/windows system</li> <li>Turbojpeg (via apt on linux, manually install on windows)</li> <li>works probably best with 3d printed photobooth and parts listed in the BOM</li> </ul> <p>The photobooth app can be used standalone but is not feature complete yet. Anyway, it integrates well with the fully blown photobooth project, see description below how to achieve integration.</p>"},{"location":"installation/#install-via-pip","title":"Install via pip","text":"<p>The app is available as PyPI package. On a fresh Raspberry Pi OS 64bit, run following commands:</p> <pre><code>sudo apt-get update\nsudo apt-get upgrade # system should be up to date\n\n# install some system dependencies\nsudo apt-get -y install libturbojpeg0 python3-pip libgl1 python3-picamera2 libgphoto2-dev\n\n# add user to input group for keyboard events\nusermod --append --groups tty,input {USERNAME}\n\n# install app\npip install photobooth-app\n\n# create data folder\nmkdir ~/photobooth-data\ncd ~/photobooth-data\n\n# start app\nphotobooth\n</code></pre> <p>Browse to http://localhost:8000 and see if the app is working properly.</p>"},{"location":"installation/#install-development-version","title":"Install development version","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version install directly from git:</p> <pre><code>pip install git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"help/","title":"Help","text":""},{"location":"help/faq/","title":"FAQ","text":"<p>TODO ...</p>"},{"location":"help/how-to-guides/","title":"HowTo Guides","text":"<p>Note: TODO:</p> <p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"help/how-to-guides/#troubleshooting","title":"\u2049\ufe0f Troubleshooting","text":"<p>Check following commands and files for error messages:</p> <pre><code># logfiles from service (last 200 lines)\njournalctl --user --unit=photobooth -n 200 --no-pager\n# logfiles created by photobooth\ncat ~/photobooth-app/log/qbooth.log\n# check CmaFree especially for Arducams if low:\ncat /proc/meminfo\n</code></pre> <p>If service crashed \ud83d\udc80, kill the python process:</p> <pre><code>sudo pkill -9 python3\n</code></pre>"},{"location":"help/tutorials/","title":"Tutorials","text":""},{"location":"help/tutorials/#setup-the-photobooth-app","title":"Setup the photobooth app","text":""},{"location":"help/tutorials/#prerequisites","title":"Prerequisites","text":""},{"location":"help/tutorials/#installation","title":"Installation","text":"<p>Note: TODO: (for now most relevant steps are described in github repo)</p>"},{"location":"help/tutorials/#managing-the-service","title":"Managing the service","text":"<p>Note: TODO: (for now most relevant steps are described in github repo)</p>"},{"location":"help/tutorials/#setup-camera-backends","title":"Setup Camera Backends","text":""},{"location":"help/tutorials/#webcams","title":"Webcams","text":"<p>via v4l or cv2 on windows and linux</p> <p>Check available webcam device numbers</p> <pre><code>python -c \"from photobooth.services.backends.webcamv4l import *; print(available_camera_indexes())\"\npython -c \"from photobooth.services.backends.webcamcv2 import *; print(available_camera_indexes())\"\n</code></pre>"},{"location":"help/tutorials/#raspberry-pi-camera-modules","title":"Raspberry Pi Camera Modules","text":"<p>via picamera2</p>"},{"location":"help/tutorials/#dslr","title":"DSLR","text":"<p>only linux gphoto2 currently.</p>"},{"location":"reference/","title":"Reference","text":"<p>INDEX</p>"},{"location":"reference/api/","title":"HTTP API","text":"<p>This site contains the project documentation for the <code>photobooth app</code> project that is a python application used to drive a photobooth for weddings, birthdays and other events.</p> <p></p>"},{"location":"reference/explanation/","title":"Explanation","text":"<p>TODO</p> <p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"reference/reference/","title":"Reference","text":"<p>TODO</p> <p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>calculator</code> project code.</p> <p>:: : photobooth</p> <p>: :: photobooth.routers.aquisition : :: photobooth.services.aquisitionservice</p>"}]}