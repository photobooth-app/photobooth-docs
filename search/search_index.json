{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Written in Python \ud83d\udc0d, coming along with a modern Vue frontend.</p> <p> </p> <p>Github source - PyPI package - 3d printable case - Issues - Discussions</p> <p>This site contains the project documentation for the photobooth app project. Setup your own photobooth for your wedding, birthday and other occations.</p> <p></p>"},{"location":"#features","title":"Features","text":"Feature photobooth-app PhotoboothProject PiBooth first version release 2023 2016 2017 Stars Community \u23fa\ufe0f new software, visit discussions \u2705 \u274c issue tracker only Reference system incl Box design \u2705 \u274c \u274c Camera and Image Features Cameras supported DSLR, Webcam, Pi Camera Modules DSLR, Webcam, Pi Camera Modules DSLR, Webcam, Pi Camera Modules Camera Backends Integrated gphoto2, picamera2, v4l2py, opencv2 all via cli commands gphoto2, picamera, opencv2 Camera live preview \u2705 \u23fa\ufe0f \u274c Take Picture \u2705 \u2705 \u2705 Collagen \u274c \u2705 \u2705 Video \u274c \u274c \u274c Chromakeying \u2705 \u2705 \u274c Image Filter \u2705 (instagram-like) \u2705 \u2705 Gallery Gallery local display \u2705 \u2705 \u274c Gallery external access via IP \u2705 \u2705 \u274c Sync images to USB drive \u274c \u2705 \u274c Share images online via QR code \u2705 \u23fa\ufe0f \u2705 Printing \u2705 \u2705 \u2705 Personalization Customizable Theme \u274c \u2705 \u274c Translateable \u274c \u2705 \u2705 Peripheral Hardware Integration Configurable GPIO trigger (RPI) \u2705 \u2705 \u2705 Configurable keyboard trigger \u2705 \u2705 \u274c ws281x to signal capture \u2705 \u274c \u274c Admin Admin Backend \u2705 \u2705 \u274c Plugin Architecture \u274c \u274c \u2705 Dev Installable package \u2705 \u23fa\ufe0f install script \u2705 Automated testing including hardware \u2705  \u274c \u274c  Misc Platforms Windows, Linux, Raspberry Pi Windows, Linux, Raspberry Pi Raspberry Pi, Linux (buster) Stack runtime python, vue-webapp apache+php, html-webapp python+pygame, desktop app"},{"location":"contribute/","title":"\ud83d\ude80 Contribute","text":""},{"location":"contribute/#help-improve","title":"Help Improve","text":""},{"location":"contribute/#post-issues","title":"Post Issues","text":"<p>If you find an issue, please post it in the photobooth app issue tracker.</p>"},{"location":"contribute/#improve-documentation","title":"Improve Documentation","text":"<p>If you find an issue in the documentation, modify the documentation or open a discussion.</p>"},{"location":"contribute/#send-patches-via-pull-request","title":"Send Patches via Pull Request","text":"<p>Feel free to fork the app, improve the software and send a pull request. For questions use the github discussions or issue tracker.</p>"},{"location":"contribute/#help-develop","title":"Help Develop","text":""},{"location":"contribute/#install-development-version","title":"Install development version","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version install directly from git:</p> <pre><code>pip install git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"contribute/#development","title":"Development","text":"<p>Develop on Windows or Linux using VScode. Dependency management is realized using poetry.</p> <p>Additional requirements for frontend development     - nodejs 16 (nodejs 18 fails proxying the devServer)     - yarn     - quasar cli https://quasar.dev/start/quasar-cli</p>"},{"location":"contribute/#automated-testing","title":"Automated Testing","text":"<p>Tests are run via Github Actions. The tests run in the Cloud on hosted Github runners as well as on a self-hosted runner for hardware testing. Coverage is reported to codecov.</p>"},{"location":"contribute/#selfhosted-github-runner","title":"Selfhosted Github Runner","text":"<p>Supports additional tests for hardware:</p> <ul> <li>Raspberry Pi Camera Module 3 connected to test picamera2 and autofocus algorithms</li> <li>WLED module is connected to test LED effects on thrill and shoot</li> <li>gphoto2 is installed with virtual ptp device<ul> <li>install latest dev with gphoto2 updater,  modify configure command as described here https://github.com/gphoto/libgphoto2/issues/408)</li> <li>add photos libgphoto provides when capture is requested to /usr/share/local/libgphoto2_port/xxxversion/vcamera/</li> </ul> </li> <li>webcamera is connected to test cv2 and v4l backends</li> </ul>"},{"location":"photobox3dprint/","title":"3D printed Photobooth","text":"<p>In general the photobox can be custom made out of materials you prefer. To develop and as starting point a reference design to 3d print is provided.</p> <p>If you want to add your box to this page, send a message in the discussions, category show and tell \ud83d\udce3.</p>"},{"location":"photobox3dprint/#3d-printed-reference","title":"3D printed reference","text":"<p>The photobooth is made out of a 3d printed case. Find the CAD files in the github repo: https://github.com/mgrl/photobooth-3d</p>"},{"location":"photobox3dprint/#features","title":"Features","text":"<ul> <li>solidworks files available</li> <li>compact design</li> <li>camera module integrated</li> <li>led ring signaling photo countdown and when the photo is actually taken</li> <li>7\" touchscreen</li> <li>remote buzzer</li> </ul>"},{"location":"photobox3dprint/#renderings-and-photos","title":"Renderings and Photos","text":"Total including stand tripod Total view including stand tripod Parts named Rear view Rear view 2 Rear view 3 Rear photo"},{"location":"projects/","title":"Projects and Examples","text":"<p>This is a collection of user made photobooth projects. Inspire and start making yours! \ud83d\udeeb</p> <p>If you want to add your booth to this page, send a message in the discussions, category show and tell \ud83d\udce3.</p>"},{"location":"projects/#example-projects","title":"Example projects","text":""},{"location":"projects/#3d-printed-photobooth-reference","title":"3D Printed Photobooth Reference","text":"<p>Compact 3d printed photobooth. Raspberry Pi 4B and Picamera2 system. Camera is the camera module 3. Lighting with permanent light sources.</p> <p>Additional information: 3d printed box, buzzer, image share one via QR code</p> <p> </p>"},{"location":"projects/#yours-here-that-would-be-awesome","title":"Yours here? That would be awesome! \ud83d\udd76\ufe0f","text":"<p>If you want to add your booth to this page, send a message in the discussions, category show and tell \ud83d\udce3.</p>"},{"location":"screenshots/","title":"Screenshots","text":"Frontpage List images in the gallery View image in the gallery Users can change the filter Choose camera backend in admin panel Personalize the user interface in admin panel View latest logs and status information in the admin panel"},{"location":"extras/","title":"Extras","text":"<p>This sections describes additional hardware and operating system customization to enhance the photobooth.</p>"},{"location":"extras/buzzer/","title":"Buzzer","text":"<p>Use a buzzer to trigger photos in the photobooth</p>"},{"location":"extras/buzzer/#big-red-hot-button","title":"Big Red Hot Button","text":"<p>This button is based on ESP powered by battery. It emulates a keyboard and thus can be used with the photobooth-app or other photobooth projects that use keyboard input to trigger captures.</p> <p>The power consumption measured is about 60mA - the battery has 1100mAh capacity. This gives a runtime if fully charged of 18h. Loading works only if battery is connected, means the button must be switched on to load.</p>"},{"location":"extras/buzzer/#hardware-and-assembly","title":"Hardware and Assembly","text":"<p>see separate git repository https://github.com/mgrl/photobooth-buzzer</p>"},{"location":"extras/buzzer/#esp-microcontroller-software","title":"ESP Microcontroller Software","text":"<p>see separate git repository https://github.com/mgrl/photobooth-buzzer</p>"},{"location":"extras/buzzer/#setup-in-photobooth-app","title":"Setup in photobooth app","text":"<p>Go to admin dashboard -&gt; configure -&gt; tab: hardwareinputoutput.</p> <ul> <li>Enable keyboard input</li> <li>choose the character (default = c) to take a picture.</li> </ul>"},{"location":"extras/display/","title":"Display","text":""},{"location":"extras/display/#disable-display-standby","title":"Disable display standby","text":"<p>If the display turns off after some time, disable the power save mode. Run <code>sudo raspi-config</code> and disable \"Screen Blanking\".</p>"},{"location":"extras/display/#hide-mouse-curser","title":"Hide mouse curser","text":"<p>For touchscreen displays you might consider to remove the mouse cursor. Install unclutter for this. After reboot it is enabled automatically.</p> <pre><code>sudo apt install unclutter\n</code></pre>"},{"location":"extras/onscreenkeyboard/","title":"Onscreen Display for Raspberry Pi","text":"<p>Sometimes you need to enter a E-Mail address, a password or configure the app in the admin center. There are several ways to do this, but sometimes it is more convenient to have a onscreen keyboard.</p> <p>There are several virtual keyboards available:</p> <ul> <li>onboard (preferred)</li> <li>florence or</li> <li>matchbox-keyboard</li> </ul> <p>Install one of them:</p> <pre><code># preferred:\nsudo apt-get install onboard\n\n# alternatives:\nsudo apt-get install florence\nsudo apt-get install matchbox-keyboard\n</code></pre> <p>Find some screenshots at industrialshields blog.</p> <p>See this youtube video, how to configure onboard virtual keyboard.</p>"},{"location":"extras/shareservice-landing/","title":"Want to download images?","text":"<p>Probably you wanted to download an image from photobooth via QR code? It seems this is not correctly configured \ud83d\ude12</p> <p>\u27a1\ufe0f \u27a1\ufe0f \u27a1\ufe0f Setup the shareservice as described!</p>"},{"location":"extras/sync/","title":"Sync Online","text":"<p>(for file downloads via QR Code)</p> <pre><code>sudo apt-get install rclone inotify-tools\n</code></pre> <pre><code>rclone config\n</code></pre> <p>Setup the remote named \"boothupload\"!</p> <pre><code>chmod u+x ~/photobooth-app/boothupload.sh\ncp ~/photobooth-app/boothupload.service ~/.config/systemd/user/\nsystemctl --user enable boothupload.service\nsystemctl --user start boothupload\nsystemctl --user status boothupload\n</code></pre>"},{"location":"extras/wifi/","title":"Wifi and Hotspot","text":"<p>At home prefer local wifi with endless data. If this is not available connect to a mobile hotspot for online sync.</p> <p>In file /etc/wpa_supplicant/wpa_supplicant.conf set a priority for local and hotspot wifi:</p> <pre><code>network={\n    ssid=\"homewifi\"\n    psk=\"passwordOfhomewifi\"\n    priority=10\n}\nnetwork={\n   ssid=\"mobileexpensivewifi\"\n   psk=\"passwordOfmobileexpensivewifi\"\n   priority=5\n}\n</code></pre>"},{"location":"extras/wled/","title":"LED signaling using WS281x","text":"<p>Add animated lights to your photobooth powered by WLED. WLED is a fast and feature-rich implementation of an ESP8266/ESP32 webserver to control NeoPixel (WS2812B, WS2811, SK6812) LEDs.</p> <p>WLED integration for LED signaling, see yourself:</p>"},{"location":"extras/wled/#hardware","title":"Hardware","text":""},{"location":"extras/wled/#bom","title":"BOM","text":"<ul> <li>ESP board, for example Wemos D1 mini.</li> <li>3d printed mount for wemos d1 mini</li> <li>ring light for 3d printed photobooth or whatever led stripe you want</li> <li>some cables</li> </ul>"},{"location":"extras/wled/#wiring","title":"Wiring","text":""},{"location":"extras/wled/#setup-wled","title":"Setup WLED","text":"<ul> <li>Connect the ESP board via USB to the computer running the photobooth-app.</li> <li>Install WLED using the webinstaller</li> <li>Connect the WLED device to your WiFi. The webinstaller asks for the credentials and configures the ESP accordingly.</li> <li>Visit the WLED website on the ESP and configure.</li> <li>If you use exact the same items listed in the BOM, you can start using following<ul> <li>config</li> <li>presets</li> </ul> </li> <li>In the photobooth-app enable the WLED integration and add the serial port to the ESP device in the admin config.</li> </ul> <p>For more detailed instructions on the WLED device itself see the WLED website see</p>"},{"location":"extras/wled/#links-to-wled-project","title":"Links to WLED project","text":"<p>Head over to https://kno.wled.ge/basics/getting-started/ for more detailed installation instructions and hardware setup.</p>"},{"location":"extras/wled/#required-presets-for-photobooth-to-work","title":"Required presets for photobooth to work","text":"<p>In the WLED webfrontend define three presets:</p> <ul> <li>ID 1: standby (usually LEDs off)</li> <li>ID 2: countdown (animates countdown)</li> <li>ID 3: shoot (imitate a flash)</li> </ul> <p>Please define presets on your own in WLED webfrontend. Once added, in the photobooth enable the WLED integration and provide the serial port to WLED esp device. Check logs on startup whether the module is detected correctly.</p>"},{"location":"reference/","title":"Reference","text":"<p>See references on sub chapters.</p>"},{"location":"reference/api/","title":"HTTP API","text":"<p>Following HTTP api is provided by the photobooth app.</p> <p></p>"},{"location":"reference/photoboothprojectintegration/","title":"Integrate Photobooth-Project and this Photobooth-App","text":"<p>Info</p> <p>This photobooth app is not yet feature complete. If you miss a feature consider to pair it with the photobooth project.</p> <p>Once this app and photobooth project is installed, integrate them using the settings below in photobooth project.</p> <p>Following commands have to be set in photobooth project to use this app as streamingserver. Works best if photobooth-app and photobooth-project installed on same device. If installed on different device, replace http://localhost by the actual hostname.</p> <pre><code>take_picture_cmd: curl -o \"%s\" http://localhost:8000/aquisition/still | echo Done\ntake_picture_msg: Done\npre_photo_cmd: curl http://localhost:8000/aquisition/mode/capture\npost_photo_cmd: curl http://localhost:8000/aquisition/mode/preview\npreview_url: url(\"http://localhost:8000/aquisition/stream.mjpg\")\nbackground_defaults: url(\"http://localhost:8000/aquisition/stream.mjpg\")\n</code></pre>"},{"location":"setup/","title":"Setup the photobooth","text":"<p>This chapter describes the setup of the python photobooth app on linux or windows platform. Start by</p> <ul> <li>installing the app and</li> <li>setup one or two cameras.</li> <li>Later you might want to add GPIO support, printing or other extras.</li> <li>Updating the app gives you latest features. See the changelog for what's new.</li> <li>You have issues? Want to discuss? Come over to github discussions.</li> </ul>"},{"location":"setup/camera_setup/","title":"Camera Setup","text":"<p>The photobooth app supports cameras utilizing multiple backends:</p> <ul> <li>picamera2 backend supports Raspberry Pi Camera Modules</li> <li>gphoto2 backend supports DSLR cameras on Linux platforms</li> <li>digicamcontrol backend supports DSLR cameras on Windows platforms (not yet implemented!)</li> <li>opencv2 backend supports USB webcameras on Linux and Windows platforms</li> <li>v4l2 backend supports USB webcameras on Linux</li> </ul> <p>Two backends can be used simultaneously in hybrid mode. The first backend is used as main backend to capture high quality still images. The second backend is used as live backend to stream video preview only.</p> <p>Note</p> <p>After changing config, the app needs to be restarted manually.</p> <p>If you need help setup a specific camera, start a new discussion on github.</p>"},{"location":"setup/camera_setup/#raspberry-csi-camera-modules","title":"Raspberry CSI Camera Modules","text":"<p>Camera modules are supported using picamera2 based on the new libcamera stack. Autofocus camera modules are supported.</p> <p>The app is tested with following devices:</p>"},{"location":"setup/camera_setup/#camera-module-3","title":"Camera Module 3","text":"<p>The latest Camera Module 3 is probably the best camera module to use in the photobooth. It supports fast autofocus and comes with native driver in the Raspberry Pi OS.</p> <p>Ensure the camera is working properly using the libcamera stack:</p> <pre><code>libcamera-hello\n</code></pre> <p>If it does properly open the camera, the photobooth app can use it also. If some errors come up, try to fix the camera setup before start using it actually. Find installation instructions directly at the raspberry pi foundation.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Picamera2</li> <li>Choose Picamera2 focuser module, set Continuous for camera module 3</li> <li>Enable livepreview if desired</li> <li>Change the resolution requested from the camera on common tab to width=4608, height=2592</li> <li>Restart the app</li> </ul>"},{"location":"setup/camera_setup/#camera-modules-12hq","title":"Camera Modules 1/2/HQ","text":"<p>All other camera modules from the Raspberry Pi ecosystem work the same way as the latest camera module 3. They usually come with lower image quality and do not have autofocus. Due to this other camera modules are not recommended for use as main camera. You might consider to use them only for livestream preview.</p> <p>Setup is the same as for camera module 3 but with different resolution and no focuser module enabled.</p>"},{"location":"setup/camera_setup/#arducam-imx519","title":"Arducam imx519","text":"<p>Sony's imx519 sensor used in Arducam's imx519 camera module is supported by the Raspberry Pi OS natively since about March 2023.</p> <p>This means the module can be used with or without installing Arducams custom driver packages:</p> <ul> <li>without Arducams driver:<ul> <li>\u2796No PDAF support</li> <li>\u2796Only interval based autofocus e.g. every 10 seconds</li> <li>\u2795More stable upgrades because no customized libcamera needs to be installed.</li> <li>install as described in discussions</li> </ul> </li> <li>with Arducams driver:<ul> <li>\u2795PDAF support</li> <li>\u2795Continuous autofocus like camera module 3</li> <li>\u2796apt upgrade may break driver/libcamera from time to time</li> <li>install as described by Arducam</li> </ul> </li> </ul> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Picamera2</li> <li>Choose Picamera2 focuser module, set Continuous if Arducams driver installed, otherwise choose Interval.</li> <li>Enable livepreview if desired</li> <li>Change the resolution requested from the camera on common tab to width=4656, height=3496</li> <li>Restart the app</li> </ul>"},{"location":"setup/camera_setup/#other-third-party-camera-modules","title":"Other third party camera modules","text":"<p>In principle every camera supported by libcamera / picamera2 would work. Since the cameras do not come with native support of the Raspberry Pi OS using them could be troublesome and it's untested. Start a discussion if there is a camera not working properly.</p>"},{"location":"setup/camera_setup/#dslr-via-gphoto2-linux","title":"DSLR via gphoto2 (Linux)","text":"<p>The app is tested with a Canon 1100D. In general all gphoto2 supported cameras can be used. If the camera supports liveview a stream is created and being used as preview in the app. If the camera does not support liveview, you might want to consider setup the app in hybrid mode. Main camera would be the DSLR to take high quality images, the livestream is captured from a secondary backend. As secondary backend most suitable is a webcamera or raspberry pi camera module.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the main backend to Gphoto2</li> </ul> <p>DSLR cameras of different manufacturer may behave differently. There are some settings that might need to be adjusted if autofocus is slow or preview cannot be generated. Tinker with available settings until it works properly. If you run into trouble, create a new issue in the tracker.</p>"},{"location":"setup/camera_setup/#dslr-via-digicamcontrol-windows","title":"DSLR via digicamcontrol (Windows)","text":"<p>Implementation not yet finished, feel free to contribute \ud83d\ude0a</p>"},{"location":"setup/camera_setup/#webcam","title":"Webcam","text":"<p>USB-webcams are integrated via two backends:</p> <ul> <li>Opencv2 (Linux/Windows) and</li> <li>v4l2 (Linux only).</li> </ul> <p>On Linux prefer v4l2 backend because it is more efficient in directly streaming MJPG data instead image frames like the opencv2 implementation.</p> <p>To use the webcam choose opencv2 or v4l2 as backend.</p> <p>Both backends use a camera device index to open the camera. To find which indexes are available on your system issue the following commands.</p> check v4l2 indexes:<pre><code>python -c \"from photobooth.services.backends.webcamv4l import *; print(available_camera_indexes())\"\n</code></pre> check opencv2 indexes:<pre><code>python -c \"from photobooth.services.backends.webcamcv2 import *; print(available_camera_indexes())\"\n</code></pre> <p>The command returns an array of indexes for which a webcam was detected.</p> <p>Now finish setup:</p> <ul> <li>Set the index in the admin center, config, tab backends.</li> <li>set the backend (cv2 or v4l) as main backend</li> <li>Consider changing the resolution requested from the camera on common tab.</li> </ul>"},{"location":"setup/camera_setup/#hybrid-dslr-and-second-backend-to-stream","title":"Hybrid: DSLR and second backend to stream","text":"<p>The app supports simultaneous use of two backends at the same time. This is useful to grab high quality pictures from a DSLR camera via gphoto2 and livestream from a webcamera or picamera module. Hybrid mode allows for live preview even if the DSLR camera is not capable to stream preview video.</p> <p>In hybrid mode, the main backend is used for still images, the live backend for video streaming. To enable hybrid mode:     - configure main backend as normal     - also configure live backend.</p> <p>If a live backend is set, it is requested for video preview instead of the main backend.</p>"},{"location":"setup/gpio/","title":"Raspberry Pi GPIO","text":"<p>The photobooth supports Raspberry Pi GPIO to trigger certain events. Currently supported triggers are:</p> <ul> <li>Shutdown host, default GPIO 17, hold 2 seconds</li> <li>Reboot host, default GPIO 18, hold 2 seconds</li> <li>Take picture, default GPIO 27, press</li> <li>Print most recent image, default GPIO 22, press</li> </ul> <p>Internally gpiozero python implementation is used.</p>"},{"location":"setup/gpio/#raspberry-pi-gpio-wiring","title":"Raspberry Pi GPIO wiring","text":"<p>To use the hardware triggers wire a normally open button from GND to the designated GPIO. For example connect the button to GND and GPIO 17.</p> <p> source</p>"},{"location":"setup/gpio/#configure","title":"Configure","text":"<p>In the admin panel tab hardwareinput enable the GPIO feature in general. Change the default GPIO numbers according to your wiring.</p>"},{"location":"setup/installation/","title":"Installation \ud83d\udd27","text":""},{"location":"setup/installation/#supported-platforms-and-cameras","title":"Supported Platforms and Cameras","text":"Hardware-Platform Software-Platform Supported Cameras Raspberry Pi 3 / 4 Raspberry Pi OS 64bit Bullseye Camera Modules, gphoto2 DSLR and webcams via opencv or v4l2 Generic PC Debian/Ubuntu gphoto2 DSLR and webcams via opencv or v4l2 Generic PC Windows webcams via opencv"},{"location":"setup/installation/#reference-systems","title":"Reference Systems","text":"<p>These are systems used productive or in automated testing and guaranteed to work without issues. Gphoto2 and the webcam backends support many different camera models but manufacturers might implement communication protocols slightly different. If you run into issues, create an issue or open a discussion.</p> Hardware-Platform Software-Platform Cameras Raspberry Pi 4 Raspberry Pi OS 64bit Bullseye Camera Module v3 Raspberry Pi 4 Raspberry Pi OS 64bit Bullseye Canon 1100D"},{"location":"setup/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or later</li> <li>If Raspberry Pi: 64bit system.</li> <li>Camera, can be one or two (first camera for stills, second camera for live view)<ul> <li>DSLR: gphoto2 on Linux</li> <li>Picamera2: installed and working (test with <code>libcamera-hello</code>)</li> <li>Webcamera: no additional prerequisites, ensure camera is working using native system apps</li> </ul> </li> <li>Raspberry Pi Bullseye for Picamera2 or any other linux/windows system</li> <li>Turbojpeg (via apt on linux, manually install on windows)</li> <li>works probably best with 3d printed photobooth and parts listed in the BOM</li> </ul> <p>The photobooth app can be used standalone but is not feature complete yet. Anyway, it integrates well with the fully blown photobooth project, see description below how to achieve integration.</p>"},{"location":"setup/installation/#install-on-linux-debianubunturaspberrypi-os","title":"Install on Linux (Debian/Ubuntu/RaspberryPi OS)","text":"<p>The app is available as PyPI package. On a fresh Raspberry Pi OS 64bit, run following commands:</p>"},{"location":"setup/installation/#update-system","title":"Update System","text":"<pre><code>sudo apt-get update\nsudo apt-get upgrade\n</code></pre>"},{"location":"setup/installation/#install-system-dependencies","title":"Install system dependencies","text":"<p>Following dependencies to be installed for Raspberry Pi OS 64bit Bullseye. Adjust for debian/ubuntu. Picamera2 is only available on Raspberry Pi.</p> <pre><code># basic stuff\nsudo apt-get -y install libturbojpeg0 python3-pip libgl1 libgphoto2-dev\n# to display some nice icons and emoticons\nsudo apt-get -y install fonts-noto-color-emoji\n# to sync images online\nsudo apt-get -y install rclone inotify-tools\n# to use camera modules on rpi\nsudo apt-get -y install python3-picamera2\n</code></pre>"},{"location":"setup/installation/#tweak-system-settings","title":"Tweak system settings","text":"<p>To use hardware input from keyboard or presenter, the current user needs to be added to tty and input group. Replace {USERNAME} by actual username, for example pi.</p> <pre><code>usermod --append --groups tty,input {USERNAME}\n</code></pre>"},{"location":"setup/installation/#install-photobooth-app-from-pypi","title":"Install photobooth app from PyPi","text":"<pre><code>pip install photobooth-app\n</code></pre>"},{"location":"setup/installation/#create-data-folder","title":"Create data folder","text":"<p>The photobooth-app automatically uses the current folder as data folder. All images, logs and config files will be stored in this folder.</p> <pre><code>mkdir ~/photobooth-data\ncd ~/photobooth-data\n</code></pre>"},{"location":"setup/installation/#start-the-app","title":"Start the app","text":"<pre><code>photobooth\n</code></pre> <p>Browse to http://localhost:8000 and see if the app is working properly. Per default the app uses a generated image and displays a timer only. No camera is started at this point. You need to continue setting up the cameras.</p> <p>Info</p> <p>Have issues accessing the website or see error messages during installation and app startup? Check the troubleshooting guide.</p>"},{"location":"setup/installation/#install-photobooth-service-on-startup","title":"Install photobooth service on startup","text":""},{"location":"setup/installation/#automatic-service-setup","title":"Automatic service setup","text":"<p>Once the photobooth-app was started the service can be installed automatically on Linux systems. Choose in the Admin Center -&gt; Dashboard -&gt; Server Control -&gt; Install Service. After confirmation the service is installed as described below for manual setup. If the setup fails, please install manually.</p>"},{"location":"setup/installation/#manual-service-setup","title":"Manual service setup","text":"<p>Now that you ensured, the photobooth app is working properly, it's time to setup the app as a service. If you installed the app according to above instructions, the template .service file works for you.</p> <p>Create the following file at the given location:</p> ~/.local/share/systemd/user/photobooth-app.service<pre><code>[Unit]\nDescription=photobooth-app\nAfter=default.target\n\n[Service]\nType=simple\nRestart=always\n#you might want to adjust following line\nWorkingDirectory=%h/photobooth-data/\nExecStart=python -O -m photobooth\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Now enable the service and start it:</p> <pre><code>systemctl --user daemon-reload\nsystemctl --user enable photobooth-app.service\nsystemctl --user start photobooth-app.service\n</code></pre> <p>Info</p> <p>The service does not start? Check the troubleshooting guide. Following commands might be helpful: <pre><code>systemctl --user status photobooth-app.service\n</code></pre> <pre><code>journalctl --user --unit photobooth-app.service\n</code></pre></p>"},{"location":"setup/installation/#desktop-shortcut-to-webfrontend","title":"Desktop shortcut to webfrontend","text":"<p>Create the following file at the given location:</p> ~/Desktop/photobooth-app.desktop<pre><code>[Desktop Entry]\nVersion=1.3\nTerminal=false\nType=Application\nName=Photobooth-App\nExec=chromium-browser --kiosk http://localhost:8000/ --noerrdialogs --disable-infobars --no-first-run --check-for-update-interval=31536000 --touch-events=enabled --password-store=basic\nStartupNotify=false\n</code></pre>"},{"location":"setup/installation/#autostart-webfrontend-on-system-startup","title":"Autostart webfrontend on system startup","text":"<p>Create the same file as for desktop shortcut above and place it in <code>/etc/xdg/autostart/photobooth-app.desktop</code>. After reboot chromium will start automatically.</p>"},{"location":"setup/installation/#install-on-windows","title":"Install on Windows","text":"<p>While using the app on windows works, there is no documentation yet. Also use is limited by now, because the digicamcontrol software is not yet implemented. Only webcams can be used on windows right now.</p>"},{"location":"setup/installation/#install-development-version","title":"Install development version","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version install directly from git:</p> <pre><code>pip install git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"setup/mediaprocessing/","title":"Mediaprocessing","text":"<p>The mediaitems (images, videos, gifs) are postprocessed in a configurable pipeline consisting of several stages. The pipeline starts with the original mediaitem. Next is the stage to remove a greenscreen, add texts and a new background. The final processed item is stored to the gallery.</p>"},{"location":"setup/mediaprocessing/#examples","title":"Examples","text":"<p>TODO</p>"},{"location":"setup/mediaprocessing/#pipelines","title":"Pipelines","text":"<p>The pipelines are different depending on the type of media.</p>"},{"location":"setup/mediaprocessing/#picture-pipeline","title":"Picture-Pipeline","text":""},{"location":"setup/mediaprocessing/#collage-pipeline","title":"Collage-Pipeline","text":"<p>Feature not yet implemented. You're invited to contribute :)</p>"},{"location":"setup/mediaprocessing/#gifvideo-pipeline","title":"GIF/Video-Pipeline","text":"<p>Feature not yet implemented. You're invited to contribute :)</p>"},{"location":"setup/mediaprocessing/#print-pipeline","title":"Print-Pipeline","text":"<p>Feature not yet implemented. You're invited to contribute :)</p>"},{"location":"setup/mediaprocessing/#stages","title":"Stages","text":""},{"location":"setup/mediaprocessing/#chromakeying","title":"Chromakeying","text":"<p>Remove a color from the captured image.</p>"},{"location":"setup/mediaprocessing/#instagram-like-color-filter","title":"Instagram-Like Color-Filter","text":"<p>Apply a default color filter. Choose from pilgram2's available filters. There is also the option for the user to change the filter in the gallery. See UI configuration in admin dashboard.</p>"},{"location":"setup/mediaprocessing/#background-fill-solid-color","title":"Background Fill Solid Color","text":"<p>When using the chromakeying / background removal stages, the removed background is left empty and transparent. With this stage, the transparent area is filled with a solid color.</p>"},{"location":"setup/mediaprocessing/#background-image","title":"Background Image","text":"<p>When using the chromakeying / background removal stages, the removed background is left empty and transparent. With this stage, the transparent area is filled with an image.</p>"},{"location":"setup/mediaprocessing/#texts","title":"Texts","text":"<p>Texts that are overlaid the finished image. Use it to easily individualize the images without having to create a new background images where a picture would get inserted to. Custom fonts are supported.</p>"},{"location":"setup/printing/","title":"Printing","text":"<p>Setup printing allows to get a hardcopy of the images and collages. Prints can be triggered by</p> <ul> <li>Touchscreen button in gallery</li> <li>GPIO (Raspberry Pi only)</li> <li>keyboard input</li> <li>API</li> </ul>"},{"location":"setup/printing/#working-principle","title":"Working Principle","text":"<p>The user can choose an image in the gallery to print. In the background, the photobooth-app invokes a custom command, that needs to be set. This way, printing works on all platforms where a print command is available. There is no feedback to photobooth app about the status of the print job or the printer itself. If the paper is empty the photobooth app is not aware of that.</p>"},{"location":"setup/printing/#general-setup","title":"General Setup","text":"<p>The configuration is made in the Admin Center -&gt; Config -&gt; Tab: HardwareInputOutput.</p> <ul> <li>Enable printservice in general</li> <li>Set a time to block new print jobs. The user needs to wait this time until a new print job can be triggered.</li> <li>The command to print is specific to your platform (Windows/Linux) and setup. Following are some recommendation help you to start.</li> </ul> <p>Info</p> <p>Test printing with a virtual PDF printer: https://wiki.ubuntuusers.de/CUPS-PDF/</p>"},{"location":"setup/printing/#setup-on-linux","title":"Setup on Linux","text":"<p>On Linux printing is realized with CUPS software. The cups webinterface is available on http://localhost:631/printers/ usually. The link only works from the Linux system itself, it's not available in the local network. Installing a printer is very individual to the specific printer and the setup. Try to install on your own. In the end, make sure the following command prints a photo. Instead of {filename} point to some image on the computer for testing.</p> <p>Following is an example to print. Set the command in the app. {filename} is replaced by the .jpg image to print when the job is run.</p> <pre><code>lp -d PRINTER_NAME_HERE -o landscape -o fit-to-page {filename}\n</code></pre> <p>If you use other commands, that work better in your installation, let me know in GitHub Discussions.</p> <p>Info</p> <p>You might want to update to more recent driver packages. See following guide: https://www.peachyphotos.com/blog/stories/building-modern-gutenprint/ Also you might need a ppd file. Here is one for Canon Selphy CP1300 that works.</p>"},{"location":"setup/printing/#setup-on-windows","title":"Setup on Windows","text":"<p>As first start use mspaint to test printing. Use following print command on windows.</p> <pre><code>mspaint /p {filename}\n</code></pre> <p>If you use other commands, that work better in your installation, let me know in GitHub Discussions.</p>"},{"location":"setup/printing/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>check photobooth error log</li> </ul>"},{"location":"setup/shareservice/","title":"Share images via QR Code","text":"<p>The share service allows users to easily download images on the user's phone. The user simply scans the QR code to download.</p> <p> </p> Scan the QR code to download image to smartphones."},{"location":"setup/shareservice/#working-principle","title":"Working Principle","text":"<p>It's developed with ease of use in mind and shall work on most systems even with firewalled internet connection on photobooth side like cellular services. Once setup, the prinicple is as following:</p> <ul> <li>photobooth starts and creates a long-term connection via internet (wifi, ethernet or cellular) to a php script on your webhosting service.</li> <li>now if a QR code is scanned, the php script sends an upload request via the long-term connection to the photobooth</li> <li>the photobooth uploads the requested file</li> <li>once upload is finished, the image is displayed to the user</li> </ul>"},{"location":"setup/shareservice/#benefits","title":"Benefits","text":"<ul> <li>secure: the photobooth does not need to expose a service to the internet</li> <li>saves data: only images that are requested via QR code are transferred via internet</li> <li>works also with cellular internet service that usually provide no public ip address</li> <li>simple: just one php file to setup</li> </ul>"},{"location":"setup/shareservice/#setup","title":"Setup","text":"<ul> <li>download dl.php</li> <li>edit the config variables on top of dl.php. see the comments in dl.php for reference.</li> <li>place the edited dl.php on a public server, for example your shared hoster. The server must be available to the photobooth and the users downloading photos later.</li> <li>Pair the dl.php script with photobooth app by configuring the shareservice settings in photobooth admin config, tab common:<ul> <li>set shareservice_apikey to same value as in dl.php</li> <li>set shareservice_url to the public URL pointing to the dl.php script.</li> <li>choose whether to download the original file or the full processed version.</li> </ul> </li> <li>Now restart the photobooth app and try to scan a QR code in the gallery.</li> </ul>"},{"location":"setup/shareservice/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>check php error log in the folder where dl.php is located</li> <li>check photobooth error log</li> </ul>"},{"location":"setup/update/","title":"Update","text":""},{"location":"setup/update/#update-photobooth-app-from-pypi","title":"Update photobooth app from PyPi","text":"<p>Check the  changelog for breaking changes and new features. To upgrade to the latest release use pip:</p> <pre><code>pip install --upgrade photobooth-app\n</code></pre> <p>Afterwards restart the photobooth. If the app doesn't show up again, check the troubleshooting page.</p>"},{"location":"setup/update/#update-to-development-versions","title":"Update to development versions","text":"<p>Stable releases are published at PyPI registry usually. To test the latest development version update directly from git:</p> <pre><code># upgrade to main-branch\npip install --upgrade --force-reinstall git+https://github.com/mgrl/photobooth-app.git@main\n\n# or upgrade to dev-branch\npip install --upgrade --force-reinstall git+https://github.com/mgrl/photobooth-app.git@dev\n</code></pre>"},{"location":"support/","title":"Support","text":"<p>Find support on these channels:</p> <ul> <li>Pages here, for example in the troubleshooting guide or in the frequently asked questions.</li> <li>Search the site</li> <li>Open a discussion on github.</li> <li>Create an issue ticket on github.</li> </ul>"},{"location":"support/faq/","title":"FAQ","text":"<p>TODO! No FAQ yet.</p> <p>Check discussions for further help!</p>"},{"location":"support/troubleshooting/","title":"Troubleshooting","text":""},{"location":"support/troubleshooting/#photobooth-app-website-not-available","title":"Photobooth app website not available","text":"<p>In default configuration the app listens to 0.0.0.0:8000, so it can be reached from every computer in the same network on port 8000.</p> <p>If the website is not available, the reason could be</p> <ul> <li>network issues or</li> <li>bad configuration</li> </ul> <p>Check that the website is available on the device itself via http://localhost:8000. If that works, the issue is about the network.</p> <p>If not, the app might have crashed.</p> <p>The following commands help tracking down issues and gather information:</p> <pre><code># logfiles from service (last 200 lines)\njournalctl --user --unit=photobooth-app -n 200 --no-pager\n# logfiles created by photobooth\ncat ~/photobooth-data/log/qbooth.log\n# check CmaFree especially for Arducams if low:\ncat /proc/meminfo\n</code></pre> <p>If service crashed \ud83d\udc80, kill the python process:</p> <pre><code># check whether there is a process still running but not responsive:\nps ax | grep python3\n# kill it\nsudo pkill -9 python3\n</code></pre> <p>Manually start the photobooth-app and watch the terminal</p> <pre><code>photobooth #or\npython -m photobooth\n</code></pre> <pre><code>INFO: The app uses current directory as data directory!\n</code></pre>"},{"location":"support/troubleshooting/#photobooth-command-not-found","title":"Photobooth command not found","text":"<p>If there is a warning as following during pip installation and photobooth can't start check the PATH variable</p> <pre><code>WARNING: The script photobooth is installed in '/home/pi/.local/bin' which is not on PATH.\nConsider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.\n</code></pre> <p>See following is fine, might just need a restart after installation because the path .local/bin did not exist before.</p> ~/.profile<pre><code># set PATH so it includes user's private bin if it exists\nif [ -d \"$HOME/.local/bin\" ] ; then\nPATH=\"$HOME/.local/bin:$PATH\"\nfi\n</code></pre>"},{"location":"support/troubleshooting/#gphoto2-camera-found-but-no-access","title":"Gphoto2 camera found but no access","text":"<p>On a fresh Linux installation, there might be services running to detect cameras and allow for easy file transfer. For the photobooth this needs to be disabled because the application needs access to the camera.</p> <p>If you find errors in the log as below, read further.</p> <pre><code>[    INFO] found camera - 0:  usb:001,009  Canon EOS 1100D (gphoto2.py:303)\n[    INFO] (gp_libusb1_open [libusb1.c:437]) 'libusb_claim_interface (port-&gt;pl-&gt;dh, port-&gt;settings.usb.interface)' failed: Resource busy (-6) (port_log.py:89)\n[    INFO] (gp_port_set_error [gphoto2-port.c:1190]) Could not claim interface 0 (Success). Make sure no other program (gvfs-gphoto2-volume-monitor) or kernel module (such as sdc2xx, stv680, spca50x) is using the device and you have read/write access to the device. (port_log.py:89)\n[CRITICAL] camera failed to initialize. no power? no connection? (gphoto2.py:100)\n[   ERROR] [-53] Could not claim the USB device (gphoto2.py:101)\n[    INFO] (gp_libusb1_open [libusb1.c:437]) 'libusb_claim_interface (port-&gt;pl-&gt;dh, port-&gt;settings.usb.interface)' failed: Resource busy (-6) (port_log.py:89)\n[    INFO] (gp_port_set_error [gphoto2-port.c:1190]) Could not claim interface 0 (Success). Make sure no other program (gvfs-gphoto2-volume-monitor) or kernel module (such as sdc2xx, stv680, spca50x) is using the device and you have read/write access to the device. (port_log.py:89)\n</code></pre> <p>Check for running processes:</p> <pre><code>$ ps ax | grep gphoto2\n1074 ?        Ssl    0:00 /usr/libexec/gvfs-gphoto2-volume-monitor\n2785 ?        Sl     0:00 /usr/libexec/gvfsd-gphoto2 --spawner :1.7 /org/gtk/gvfs/exec_spaw/2\n</code></pre> <p>To disable the monitoring services, execute following commands:</p> <pre><code>systemctl --user stop gvfs-gphoto2-volume-monitor\nsystemctl --user disable gvfs-gphoto2-volume-monitor # after a reboot, the gvfs-gphoto2-volume-monitor will be enabled automatically again :(\n# permanently disable:\nsudo chmod -x /usr/lib/gvfs/gvfs-gphoto2-volume-monitor\n\nreboot\n</code></pre> <p>After a restart there should be no process any more:</p> <pre><code>$ ps ax | grep gphoto2\n# nothing to see here...\n</code></pre> <p>Additional references:</p> <ul> <li>https://github.com/gphoto/gphoto2/issues/181</li> </ul>"},{"location":"support/troubleshooting/#error-failed-building-wheel-for-component","title":"Error Failed building wheel for component","text":"<pre><code>ERROR: Failed building wheel for cmake\n      Failed to build cmake\n      ERROR: Could not build wheels for cmake, which is required to install pyproject.toml-based projects\n</code></pre> <p>During pip installation cmake error can come up if not all prerequisites are complied with.</p> <ul> <li>Check to comply with prerequisites.</li> <li>OpenCV-python fails during installation on 32 bit Raspberry Pi OS. Use 64bit version.</li> </ul>"}]}